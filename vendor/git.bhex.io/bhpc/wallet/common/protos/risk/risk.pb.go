// Code generated by protoc-gen-go. DO NOT EDIT.
// source: risk.proto

package risk

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "git.bhex.io/bhpc/wallet/common/protos/common"
import sign "git.bhex.io/bhpc/wallet/common/protos/sign"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type WithdrawlSignatureRcRequest struct {
	SignReq              *common.BhWithdrawalRequestSign `protobuf:"bytes,1,opt,name=sign_req,json=signReq,proto3" json:"sign_req,omitempty"`
	BhSign               string                          `protobuf:"bytes,2,opt,name=bh_sign,json=bhSign,proto3" json:"bh_sign,omitempty"`
	RcSign               string                          `protobuf:"bytes,3,opt,name=rc_sign,json=rcSign,proto3" json:"rc_sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *WithdrawlSignatureRcRequest) Reset()         { *m = WithdrawlSignatureRcRequest{} }
func (m *WithdrawlSignatureRcRequest) String() string { return proto.CompactTextString(m) }
func (*WithdrawlSignatureRcRequest) ProtoMessage()    {}
func (*WithdrawlSignatureRcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_1722113f95f93833, []int{0}
}
func (m *WithdrawlSignatureRcRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WithdrawlSignatureRcRequest.Unmarshal(m, b)
}
func (m *WithdrawlSignatureRcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WithdrawlSignatureRcRequest.Marshal(b, m, deterministic)
}
func (dst *WithdrawlSignatureRcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawlSignatureRcRequest.Merge(dst, src)
}
func (m *WithdrawlSignatureRcRequest) XXX_Size() int {
	return xxx_messageInfo_WithdrawlSignatureRcRequest.Size(m)
}
func (m *WithdrawlSignatureRcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawlSignatureRcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawlSignatureRcRequest proto.InternalMessageInfo

func (m *WithdrawlSignatureRcRequest) GetSignReq() *common.BhWithdrawalRequestSign {
	if m != nil {
		return m.SignReq
	}
	return nil
}

func (m *WithdrawlSignatureRcRequest) GetBhSign() string {
	if m != nil {
		return m.BhSign
	}
	return ""
}

func (m *WithdrawlSignatureRcRequest) GetRcSign() string {
	if m != nil {
		return m.RcSign
	}
	return ""
}

type SignTxRcRequest struct {
	TxHash               string   `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignTxRcRequest) Reset()         { *m = SignTxRcRequest{} }
func (m *SignTxRcRequest) String() string { return proto.CompactTextString(m) }
func (*SignTxRcRequest) ProtoMessage()    {}
func (*SignTxRcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_1722113f95f93833, []int{1}
}
func (m *SignTxRcRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignTxRcRequest.Unmarshal(m, b)
}
func (m *SignTxRcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignTxRcRequest.Marshal(b, m, deterministic)
}
func (dst *SignTxRcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignTxRcRequest.Merge(dst, src)
}
func (m *SignTxRcRequest) XXX_Size() int {
	return xxx_messageInfo_SignTxRcRequest.Size(m)
}
func (m *SignTxRcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignTxRcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignTxRcRequest proto.InternalMessageInfo

func (m *SignTxRcRequest) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

type UtxoWalletRcRequest struct {
	WithdrawlId          []int64                 `protobuf:"varint,1,rep,packed,name=withdrawl_id,json=withdrawlId,proto3" json:"withdrawl_id,omitempty"`
	SignReq              *common.UtxoSignRequest `protobuf:"bytes,2,opt,name=sign_req,json=signReq,proto3" json:"sign_req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *UtxoWalletRcRequest) Reset()         { *m = UtxoWalletRcRequest{} }
func (m *UtxoWalletRcRequest) String() string { return proto.CompactTextString(m) }
func (*UtxoWalletRcRequest) ProtoMessage()    {}
func (*UtxoWalletRcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_1722113f95f93833, []int{2}
}
func (m *UtxoWalletRcRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UtxoWalletRcRequest.Unmarshal(m, b)
}
func (m *UtxoWalletRcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UtxoWalletRcRequest.Marshal(b, m, deterministic)
}
func (dst *UtxoWalletRcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UtxoWalletRcRequest.Merge(dst, src)
}
func (m *UtxoWalletRcRequest) XXX_Size() int {
	return xxx_messageInfo_UtxoWalletRcRequest.Size(m)
}
func (m *UtxoWalletRcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UtxoWalletRcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UtxoWalletRcRequest proto.InternalMessageInfo

func (m *UtxoWalletRcRequest) GetWithdrawlId() []int64 {
	if m != nil {
		return m.WithdrawlId
	}
	return nil
}

func (m *UtxoWalletRcRequest) GetSignReq() *common.UtxoSignRequest {
	if m != nil {
		return m.SignReq
	}
	return nil
}

type EthWalletRcRequest struct {
	WithdrawlId          int64                  `protobuf:"varint,1,opt,name=withdrawl_id,json=withdrawlId,proto3" json:"withdrawl_id,omitempty"`
	SignReq              *common.EthSignRequest `protobuf:"bytes,2,opt,name=sign_req,json=signReq,proto3" json:"sign_req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *EthWalletRcRequest) Reset()         { *m = EthWalletRcRequest{} }
func (m *EthWalletRcRequest) String() string { return proto.CompactTextString(m) }
func (*EthWalletRcRequest) ProtoMessage()    {}
func (*EthWalletRcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_1722113f95f93833, []int{3}
}
func (m *EthWalletRcRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EthWalletRcRequest.Unmarshal(m, b)
}
func (m *EthWalletRcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EthWalletRcRequest.Marshal(b, m, deterministic)
}
func (dst *EthWalletRcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EthWalletRcRequest.Merge(dst, src)
}
func (m *EthWalletRcRequest) XXX_Size() int {
	return xxx_messageInfo_EthWalletRcRequest.Size(m)
}
func (m *EthWalletRcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EthWalletRcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EthWalletRcRequest proto.InternalMessageInfo

func (m *EthWalletRcRequest) GetWithdrawlId() int64 {
	if m != nil {
		return m.WithdrawlId
	}
	return 0
}

func (m *EthWalletRcRequest) GetSignReq() *common.EthSignRequest {
	if m != nil {
		return m.SignReq
	}
	return nil
}

type Erc20WalletRcRequest struct {
	WithdrawlId          int64                    `protobuf:"varint,1,opt,name=withdrawl_id,json=withdrawlId,proto3" json:"withdrawl_id,omitempty"`
	SignReq              *common.Erc20SignRequest `protobuf:"bytes,2,opt,name=sign_req,json=signReq,proto3" json:"sign_req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *Erc20WalletRcRequest) Reset()         { *m = Erc20WalletRcRequest{} }
func (m *Erc20WalletRcRequest) String() string { return proto.CompactTextString(m) }
func (*Erc20WalletRcRequest) ProtoMessage()    {}
func (*Erc20WalletRcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_1722113f95f93833, []int{4}
}
func (m *Erc20WalletRcRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Erc20WalletRcRequest.Unmarshal(m, b)
}
func (m *Erc20WalletRcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Erc20WalletRcRequest.Marshal(b, m, deterministic)
}
func (dst *Erc20WalletRcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Erc20WalletRcRequest.Merge(dst, src)
}
func (m *Erc20WalletRcRequest) XXX_Size() int {
	return xxx_messageInfo_Erc20WalletRcRequest.Size(m)
}
func (m *Erc20WalletRcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Erc20WalletRcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Erc20WalletRcRequest proto.InternalMessageInfo

func (m *Erc20WalletRcRequest) GetWithdrawlId() int64 {
	if m != nil {
		return m.WithdrawlId
	}
	return 0
}

func (m *Erc20WalletRcRequest) GetSignReq() *common.Erc20SignRequest {
	if m != nil {
		return m.SignReq
	}
	return nil
}

type UtxoMultiWalletRcRequest struct {
	WithdrawlId          []int64                      `protobuf:"varint,1,rep,packed,name=withdrawl_id,json=withdrawlId,proto3" json:"withdrawl_id,omitempty"`
	SignReq              *common.UtxoMultiSignRequest `protobuf:"bytes,2,opt,name=sign_req,json=signReq,proto3" json:"sign_req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *UtxoMultiWalletRcRequest) Reset()         { *m = UtxoMultiWalletRcRequest{} }
func (m *UtxoMultiWalletRcRequest) String() string { return proto.CompactTextString(m) }
func (*UtxoMultiWalletRcRequest) ProtoMessage()    {}
func (*UtxoMultiWalletRcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_1722113f95f93833, []int{5}
}
func (m *UtxoMultiWalletRcRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UtxoMultiWalletRcRequest.Unmarshal(m, b)
}
func (m *UtxoMultiWalletRcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UtxoMultiWalletRcRequest.Marshal(b, m, deterministic)
}
func (dst *UtxoMultiWalletRcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UtxoMultiWalletRcRequest.Merge(dst, src)
}
func (m *UtxoMultiWalletRcRequest) XXX_Size() int {
	return xxx_messageInfo_UtxoMultiWalletRcRequest.Size(m)
}
func (m *UtxoMultiWalletRcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UtxoMultiWalletRcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UtxoMultiWalletRcRequest proto.InternalMessageInfo

func (m *UtxoMultiWalletRcRequest) GetWithdrawlId() []int64 {
	if m != nil {
		return m.WithdrawlId
	}
	return nil
}

func (m *UtxoMultiWalletRcRequest) GetSignReq() *common.UtxoMultiSignRequest {
	if m != nil {
		return m.SignReq
	}
	return nil
}

type EthMultiWalletRcRequest struct {
	WithdrawlId          int64                       `protobuf:"varint,1,opt,name=withdrawl_id,json=withdrawlId,proto3" json:"withdrawl_id,omitempty"`
	SignReq              *common.EthMultiSignRequest `protobuf:"bytes,2,opt,name=sign_req,json=signReq,proto3" json:"sign_req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *EthMultiWalletRcRequest) Reset()         { *m = EthMultiWalletRcRequest{} }
func (m *EthMultiWalletRcRequest) String() string { return proto.CompactTextString(m) }
func (*EthMultiWalletRcRequest) ProtoMessage()    {}
func (*EthMultiWalletRcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_1722113f95f93833, []int{6}
}
func (m *EthMultiWalletRcRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EthMultiWalletRcRequest.Unmarshal(m, b)
}
func (m *EthMultiWalletRcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EthMultiWalletRcRequest.Marshal(b, m, deterministic)
}
func (dst *EthMultiWalletRcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EthMultiWalletRcRequest.Merge(dst, src)
}
func (m *EthMultiWalletRcRequest) XXX_Size() int {
	return xxx_messageInfo_EthMultiWalletRcRequest.Size(m)
}
func (m *EthMultiWalletRcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EthMultiWalletRcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EthMultiWalletRcRequest proto.InternalMessageInfo

func (m *EthMultiWalletRcRequest) GetWithdrawlId() int64 {
	if m != nil {
		return m.WithdrawlId
	}
	return 0
}

func (m *EthMultiWalletRcRequest) GetSignReq() *common.EthMultiSignRequest {
	if m != nil {
		return m.SignReq
	}
	return nil
}

type Erc20MultiWalletRcRequest struct {
	WithdrawlId          int64                         `protobuf:"varint,1,opt,name=withdrawl_id,json=withdrawlId,proto3" json:"withdrawl_id,omitempty"`
	SignReq              *common.Erc20MultiSignRequest `protobuf:"bytes,2,opt,name=sign_req,json=signReq,proto3" json:"sign_req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *Erc20MultiWalletRcRequest) Reset()         { *m = Erc20MultiWalletRcRequest{} }
func (m *Erc20MultiWalletRcRequest) String() string { return proto.CompactTextString(m) }
func (*Erc20MultiWalletRcRequest) ProtoMessage()    {}
func (*Erc20MultiWalletRcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_1722113f95f93833, []int{7}
}
func (m *Erc20MultiWalletRcRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Erc20MultiWalletRcRequest.Unmarshal(m, b)
}
func (m *Erc20MultiWalletRcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Erc20MultiWalletRcRequest.Marshal(b, m, deterministic)
}
func (dst *Erc20MultiWalletRcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Erc20MultiWalletRcRequest.Merge(dst, src)
}
func (m *Erc20MultiWalletRcRequest) XXX_Size() int {
	return xxx_messageInfo_Erc20MultiWalletRcRequest.Size(m)
}
func (m *Erc20MultiWalletRcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Erc20MultiWalletRcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Erc20MultiWalletRcRequest proto.InternalMessageInfo

func (m *Erc20MultiWalletRcRequest) GetWithdrawlId() int64 {
	if m != nil {
		return m.WithdrawlId
	}
	return 0
}

func (m *Erc20MultiWalletRcRequest) GetSignReq() *common.Erc20MultiSignRequest {
	if m != nil {
		return m.SignReq
	}
	return nil
}

type EosLikeWalletRcRequest struct {
	WithdrawlId          int64                      `protobuf:"varint,1,opt,name=withdrawl_id,json=withdrawlId,proto3" json:"withdrawl_id,omitempty"`
	SignReq              *common.EosLikeSignRequest `protobuf:"bytes,2,opt,name=sign_req,json=signReq,proto3" json:"sign_req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *EosLikeWalletRcRequest) Reset()         { *m = EosLikeWalletRcRequest{} }
func (m *EosLikeWalletRcRequest) String() string { return proto.CompactTextString(m) }
func (*EosLikeWalletRcRequest) ProtoMessage()    {}
func (*EosLikeWalletRcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_1722113f95f93833, []int{8}
}
func (m *EosLikeWalletRcRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EosLikeWalletRcRequest.Unmarshal(m, b)
}
func (m *EosLikeWalletRcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EosLikeWalletRcRequest.Marshal(b, m, deterministic)
}
func (dst *EosLikeWalletRcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EosLikeWalletRcRequest.Merge(dst, src)
}
func (m *EosLikeWalletRcRequest) XXX_Size() int {
	return xxx_messageInfo_EosLikeWalletRcRequest.Size(m)
}
func (m *EosLikeWalletRcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EosLikeWalletRcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EosLikeWalletRcRequest proto.InternalMessageInfo

func (m *EosLikeWalletRcRequest) GetWithdrawlId() int64 {
	if m != nil {
		return m.WithdrawlId
	}
	return 0
}

func (m *EosLikeWalletRcRequest) GetSignReq() *common.EosLikeSignRequest {
	if m != nil {
		return m.SignReq
	}
	return nil
}

type TronWalletRcRequest struct {
	WithdrawlId          int64                 `protobuf:"varint,1,opt,name=withdrawl_id,json=withdrawlId,proto3" json:"withdrawl_id,omitempty"`
	TokenId              string                `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	SignReq              *sign.TronSignRequest `protobuf:"bytes,3,opt,name=sign_req,json=signReq,proto3" json:"sign_req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TronWalletRcRequest) Reset()         { *m = TronWalletRcRequest{} }
func (m *TronWalletRcRequest) String() string { return proto.CompactTextString(m) }
func (*TronWalletRcRequest) ProtoMessage()    {}
func (*TronWalletRcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_1722113f95f93833, []int{9}
}
func (m *TronWalletRcRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TronWalletRcRequest.Unmarshal(m, b)
}
func (m *TronWalletRcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TronWalletRcRequest.Marshal(b, m, deterministic)
}
func (dst *TronWalletRcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TronWalletRcRequest.Merge(dst, src)
}
func (m *TronWalletRcRequest) XXX_Size() int {
	return xxx_messageInfo_TronWalletRcRequest.Size(m)
}
func (m *TronWalletRcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TronWalletRcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TronWalletRcRequest proto.InternalMessageInfo

func (m *TronWalletRcRequest) GetWithdrawlId() int64 {
	if m != nil {
		return m.WithdrawlId
	}
	return 0
}

func (m *TronWalletRcRequest) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *TronWalletRcRequest) GetSignReq() *sign.TronSignRequest {
	if m != nil {
		return m.SignReq
	}
	return nil
}

type RippleWalletRcRequest struct {
	WithdrawlId          int64                     `protobuf:"varint,1,opt,name=withdrawl_id,json=withdrawlId,proto3" json:"withdrawl_id,omitempty"`
	SignReq              *common.RippleSignRequest `protobuf:"bytes,2,opt,name=sign_req,json=signReq,proto3" json:"sign_req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *RippleWalletRcRequest) Reset()         { *m = RippleWalletRcRequest{} }
func (m *RippleWalletRcRequest) String() string { return proto.CompactTextString(m) }
func (*RippleWalletRcRequest) ProtoMessage()    {}
func (*RippleWalletRcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_1722113f95f93833, []int{10}
}
func (m *RippleWalletRcRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RippleWalletRcRequest.Unmarshal(m, b)
}
func (m *RippleWalletRcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RippleWalletRcRequest.Marshal(b, m, deterministic)
}
func (dst *RippleWalletRcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RippleWalletRcRequest.Merge(dst, src)
}
func (m *RippleWalletRcRequest) XXX_Size() int {
	return xxx_messageInfo_RippleWalletRcRequest.Size(m)
}
func (m *RippleWalletRcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RippleWalletRcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RippleWalletRcRequest proto.InternalMessageInfo

func (m *RippleWalletRcRequest) GetWithdrawlId() int64 {
	if m != nil {
		return m.WithdrawlId
	}
	return 0
}

func (m *RippleWalletRcRequest) GetSignReq() *common.RippleSignRequest {
	if m != nil {
		return m.SignReq
	}
	return nil
}

type RippleMultiWalletRcRequest struct {
	WithdrawlId          int64                          `protobuf:"varint,1,opt,name=withdrawl_id,json=withdrawlId,proto3" json:"withdrawl_id,omitempty"`
	SignReq              *common.RippleMultiSignRequest `protobuf:"bytes,2,opt,name=sign_req,json=signReq,proto3" json:"sign_req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *RippleMultiWalletRcRequest) Reset()         { *m = RippleMultiWalletRcRequest{} }
func (m *RippleMultiWalletRcRequest) String() string { return proto.CompactTextString(m) }
func (*RippleMultiWalletRcRequest) ProtoMessage()    {}
func (*RippleMultiWalletRcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_1722113f95f93833, []int{11}
}
func (m *RippleMultiWalletRcRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RippleMultiWalletRcRequest.Unmarshal(m, b)
}
func (m *RippleMultiWalletRcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RippleMultiWalletRcRequest.Marshal(b, m, deterministic)
}
func (dst *RippleMultiWalletRcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RippleMultiWalletRcRequest.Merge(dst, src)
}
func (m *RippleMultiWalletRcRequest) XXX_Size() int {
	return xxx_messageInfo_RippleMultiWalletRcRequest.Size(m)
}
func (m *RippleMultiWalletRcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RippleMultiWalletRcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RippleMultiWalletRcRequest proto.InternalMessageInfo

func (m *RippleMultiWalletRcRequest) GetWithdrawlId() int64 {
	if m != nil {
		return m.WithdrawlId
	}
	return 0
}

func (m *RippleMultiWalletRcRequest) GetSignReq() *common.RippleMultiSignRequest {
	if m != nil {
		return m.SignReq
	}
	return nil
}

type OnlineWalletTokenWalletRcRequest struct {
	WithdrawlId          int64                                      `protobuf:"varint,1,opt,name=withdrawl_id,json=withdrawlId,proto3" json:"withdrawl_id,omitempty"`
	SignReq              *common.SendOnlineWalletTransactionRequest `protobuf:"bytes,2,opt,name=sign_req,json=signReq,proto3" json:"sign_req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *OnlineWalletTokenWalletRcRequest) Reset()         { *m = OnlineWalletTokenWalletRcRequest{} }
func (m *OnlineWalletTokenWalletRcRequest) String() string { return proto.CompactTextString(m) }
func (*OnlineWalletTokenWalletRcRequest) ProtoMessage()    {}
func (*OnlineWalletTokenWalletRcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_1722113f95f93833, []int{12}
}
func (m *OnlineWalletTokenWalletRcRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OnlineWalletTokenWalletRcRequest.Unmarshal(m, b)
}
func (m *OnlineWalletTokenWalletRcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OnlineWalletTokenWalletRcRequest.Marshal(b, m, deterministic)
}
func (dst *OnlineWalletTokenWalletRcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnlineWalletTokenWalletRcRequest.Merge(dst, src)
}
func (m *OnlineWalletTokenWalletRcRequest) XXX_Size() int {
	return xxx_messageInfo_OnlineWalletTokenWalletRcRequest.Size(m)
}
func (m *OnlineWalletTokenWalletRcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OnlineWalletTokenWalletRcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OnlineWalletTokenWalletRcRequest proto.InternalMessageInfo

func (m *OnlineWalletTokenWalletRcRequest) GetWithdrawlId() int64 {
	if m != nil {
		return m.WithdrawlId
	}
	return 0
}

func (m *OnlineWalletTokenWalletRcRequest) GetSignReq() *common.SendOnlineWalletTransactionRequest {
	if m != nil {
		return m.SignReq
	}
	return nil
}

type OntWalletRcRequest struct {
	WithdrawlId          int64                  `protobuf:"varint,1,opt,name=withdrawl_id,json=withdrawlId,proto3" json:"withdrawl_id,omitempty"`
	SignReq              *common.OntSignRequest `protobuf:"bytes,2,opt,name=sign_req,json=signReq,proto3" json:"sign_req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *OntWalletRcRequest) Reset()         { *m = OntWalletRcRequest{} }
func (m *OntWalletRcRequest) String() string { return proto.CompactTextString(m) }
func (*OntWalletRcRequest) ProtoMessage()    {}
func (*OntWalletRcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_1722113f95f93833, []int{13}
}
func (m *OntWalletRcRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OntWalletRcRequest.Unmarshal(m, b)
}
func (m *OntWalletRcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OntWalletRcRequest.Marshal(b, m, deterministic)
}
func (dst *OntWalletRcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OntWalletRcRequest.Merge(dst, src)
}
func (m *OntWalletRcRequest) XXX_Size() int {
	return xxx_messageInfo_OntWalletRcRequest.Size(m)
}
func (m *OntWalletRcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OntWalletRcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OntWalletRcRequest proto.InternalMessageInfo

func (m *OntWalletRcRequest) GetWithdrawlId() int64 {
	if m != nil {
		return m.WithdrawlId
	}
	return 0
}

func (m *OntWalletRcRequest) GetSignReq() *common.OntSignRequest {
	if m != nil {
		return m.SignReq
	}
	return nil
}

type OntMultiWalletRcRequest struct {
	WithdrawlId          int64                       `protobuf:"varint,1,opt,name=withdrawl_id,json=withdrawlId,proto3" json:"withdrawl_id,omitempty"`
	SignReq              *common.OntMultiSignRequest `protobuf:"bytes,2,opt,name=sign_req,json=signReq,proto3" json:"sign_req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *OntMultiWalletRcRequest) Reset()         { *m = OntMultiWalletRcRequest{} }
func (m *OntMultiWalletRcRequest) String() string { return proto.CompactTextString(m) }
func (*OntMultiWalletRcRequest) ProtoMessage()    {}
func (*OntMultiWalletRcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_1722113f95f93833, []int{14}
}
func (m *OntMultiWalletRcRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OntMultiWalletRcRequest.Unmarshal(m, b)
}
func (m *OntMultiWalletRcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OntMultiWalletRcRequest.Marshal(b, m, deterministic)
}
func (dst *OntMultiWalletRcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OntMultiWalletRcRequest.Merge(dst, src)
}
func (m *OntMultiWalletRcRequest) XXX_Size() int {
	return xxx_messageInfo_OntMultiWalletRcRequest.Size(m)
}
func (m *OntMultiWalletRcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OntMultiWalletRcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OntMultiWalletRcRequest proto.InternalMessageInfo

func (m *OntMultiWalletRcRequest) GetWithdrawlId() int64 {
	if m != nil {
		return m.WithdrawlId
	}
	return 0
}

func (m *OntMultiWalletRcRequest) GetSignReq() *common.OntMultiSignRequest {
	if m != nil {
		return m.SignReq
	}
	return nil
}

type VolumeWalletRcRequest struct {
	WithdrawlId          int64                     `protobuf:"varint,1,opt,name=withdrawl_id,json=withdrawlId,proto3" json:"withdrawl_id,omitempty"`
	TokenId              string                    `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	SignReq              *common.VolumeSignRequest `protobuf:"bytes,3,opt,name=sign_req,json=signReq,proto3" json:"sign_req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *VolumeWalletRcRequest) Reset()         { *m = VolumeWalletRcRequest{} }
func (m *VolumeWalletRcRequest) String() string { return proto.CompactTextString(m) }
func (*VolumeWalletRcRequest) ProtoMessage()    {}
func (*VolumeWalletRcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_1722113f95f93833, []int{15}
}
func (m *VolumeWalletRcRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeWalletRcRequest.Unmarshal(m, b)
}
func (m *VolumeWalletRcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeWalletRcRequest.Marshal(b, m, deterministic)
}
func (dst *VolumeWalletRcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeWalletRcRequest.Merge(dst, src)
}
func (m *VolumeWalletRcRequest) XXX_Size() int {
	return xxx_messageInfo_VolumeWalletRcRequest.Size(m)
}
func (m *VolumeWalletRcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeWalletRcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeWalletRcRequest proto.InternalMessageInfo

func (m *VolumeWalletRcRequest) GetWithdrawlId() int64 {
	if m != nil {
		return m.WithdrawlId
	}
	return 0
}

func (m *VolumeWalletRcRequest) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *VolumeWalletRcRequest) GetSignReq() *common.VolumeSignRequest {
	if m != nil {
		return m.SignReq
	}
	return nil
}

type EthLikeWalletRcRequest struct {
	WithdrawlId          int64                    `protobuf:"varint,1,opt,name=withdrawl_id,json=withdrawlId,proto3" json:"withdrawl_id,omitempty"`
	TokenId              string                   `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	SignReq              *sign.EthLikeSignRequest `protobuf:"bytes,3,opt,name=sign_req,json=signReq,proto3" json:"sign_req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *EthLikeWalletRcRequest) Reset()         { *m = EthLikeWalletRcRequest{} }
func (m *EthLikeWalletRcRequest) String() string { return proto.CompactTextString(m) }
func (*EthLikeWalletRcRequest) ProtoMessage()    {}
func (*EthLikeWalletRcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_1722113f95f93833, []int{16}
}
func (m *EthLikeWalletRcRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EthLikeWalletRcRequest.Unmarshal(m, b)
}
func (m *EthLikeWalletRcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EthLikeWalletRcRequest.Marshal(b, m, deterministic)
}
func (dst *EthLikeWalletRcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EthLikeWalletRcRequest.Merge(dst, src)
}
func (m *EthLikeWalletRcRequest) XXX_Size() int {
	return xxx_messageInfo_EthLikeWalletRcRequest.Size(m)
}
func (m *EthLikeWalletRcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EthLikeWalletRcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EthLikeWalletRcRequest proto.InternalMessageInfo

func (m *EthLikeWalletRcRequest) GetWithdrawlId() int64 {
	if m != nil {
		return m.WithdrawlId
	}
	return 0
}

func (m *EthLikeWalletRcRequest) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *EthLikeWalletRcRequest) GetSignReq() *sign.EthLikeSignRequest {
	if m != nil {
		return m.SignReq
	}
	return nil
}

type Erc20LikeWalletRcRequest struct {
	WithdrawlId          int64                      `protobuf:"varint,1,opt,name=withdrawl_id,json=withdrawlId,proto3" json:"withdrawl_id,omitempty"`
	SignReq              *sign.Erc20LikeSignRequest `protobuf:"bytes,2,opt,name=sign_req,json=signReq,proto3" json:"sign_req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *Erc20LikeWalletRcRequest) Reset()         { *m = Erc20LikeWalletRcRequest{} }
func (m *Erc20LikeWalletRcRequest) String() string { return proto.CompactTextString(m) }
func (*Erc20LikeWalletRcRequest) ProtoMessage()    {}
func (*Erc20LikeWalletRcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_1722113f95f93833, []int{17}
}
func (m *Erc20LikeWalletRcRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Erc20LikeWalletRcRequest.Unmarshal(m, b)
}
func (m *Erc20LikeWalletRcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Erc20LikeWalletRcRequest.Marshal(b, m, deterministic)
}
func (dst *Erc20LikeWalletRcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Erc20LikeWalletRcRequest.Merge(dst, src)
}
func (m *Erc20LikeWalletRcRequest) XXX_Size() int {
	return xxx_messageInfo_Erc20LikeWalletRcRequest.Size(m)
}
func (m *Erc20LikeWalletRcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Erc20LikeWalletRcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Erc20LikeWalletRcRequest proto.InternalMessageInfo

func (m *Erc20LikeWalletRcRequest) GetWithdrawlId() int64 {
	if m != nil {
		return m.WithdrawlId
	}
	return 0
}

func (m *Erc20LikeWalletRcRequest) GetSignReq() *sign.Erc20LikeSignRequest {
	if m != nil {
		return m.SignReq
	}
	return nil
}

type AtomWalletRcRequest struct {
	WithdrawlId          int64                   `protobuf:"varint,1,opt,name=withdrawl_id,json=withdrawlId,proto3" json:"withdrawl_id,omitempty"`
	SignReq              *common.AtomSignRequest `protobuf:"bytes,2,opt,name=sign_req,json=signReq,proto3" json:"sign_req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *AtomWalletRcRequest) Reset()         { *m = AtomWalletRcRequest{} }
func (m *AtomWalletRcRequest) String() string { return proto.CompactTextString(m) }
func (*AtomWalletRcRequest) ProtoMessage()    {}
func (*AtomWalletRcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_1722113f95f93833, []int{18}
}
func (m *AtomWalletRcRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AtomWalletRcRequest.Unmarshal(m, b)
}
func (m *AtomWalletRcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AtomWalletRcRequest.Marshal(b, m, deterministic)
}
func (dst *AtomWalletRcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AtomWalletRcRequest.Merge(dst, src)
}
func (m *AtomWalletRcRequest) XXX_Size() int {
	return xxx_messageInfo_AtomWalletRcRequest.Size(m)
}
func (m *AtomWalletRcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AtomWalletRcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AtomWalletRcRequest proto.InternalMessageInfo

func (m *AtomWalletRcRequest) GetWithdrawlId() int64 {
	if m != nil {
		return m.WithdrawlId
	}
	return 0
}

func (m *AtomWalletRcRequest) GetSignReq() *common.AtomSignRequest {
	if m != nil {
		return m.SignReq
	}
	return nil
}

type AtomMultiWalletRcRequest struct {
	WithdrawlId          int64                        `protobuf:"varint,1,opt,name=withdrawl_id,json=withdrawlId,proto3" json:"withdrawl_id,omitempty"`
	SignReq              *common.AtomMultiSignRequest `protobuf:"bytes,2,opt,name=sign_req,json=signReq,proto3" json:"sign_req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *AtomMultiWalletRcRequest) Reset()         { *m = AtomMultiWalletRcRequest{} }
func (m *AtomMultiWalletRcRequest) String() string { return proto.CompactTextString(m) }
func (*AtomMultiWalletRcRequest) ProtoMessage()    {}
func (*AtomMultiWalletRcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_1722113f95f93833, []int{19}
}
func (m *AtomMultiWalletRcRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AtomMultiWalletRcRequest.Unmarshal(m, b)
}
func (m *AtomMultiWalletRcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AtomMultiWalletRcRequest.Marshal(b, m, deterministic)
}
func (dst *AtomMultiWalletRcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AtomMultiWalletRcRequest.Merge(dst, src)
}
func (m *AtomMultiWalletRcRequest) XXX_Size() int {
	return xxx_messageInfo_AtomMultiWalletRcRequest.Size(m)
}
func (m *AtomMultiWalletRcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AtomMultiWalletRcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AtomMultiWalletRcRequest proto.InternalMessageInfo

func (m *AtomMultiWalletRcRequest) GetWithdrawlId() int64 {
	if m != nil {
		return m.WithdrawlId
	}
	return 0
}

func (m *AtomMultiWalletRcRequest) GetSignReq() *common.AtomMultiSignRequest {
	if m != nil {
		return m.SignReq
	}
	return nil
}

type BaasWithdrawalWalletRcRequest struct {
	Orders               []*common.BaasWithdrawalOrder `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	Method               string                        `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Url                  string                        `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Timestamp            string                        `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *BaasWithdrawalWalletRcRequest) Reset()         { *m = BaasWithdrawalWalletRcRequest{} }
func (m *BaasWithdrawalWalletRcRequest) String() string { return proto.CompactTextString(m) }
func (*BaasWithdrawalWalletRcRequest) ProtoMessage()    {}
func (*BaasWithdrawalWalletRcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_1722113f95f93833, []int{20}
}
func (m *BaasWithdrawalWalletRcRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BaasWithdrawalWalletRcRequest.Unmarshal(m, b)
}
func (m *BaasWithdrawalWalletRcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BaasWithdrawalWalletRcRequest.Marshal(b, m, deterministic)
}
func (dst *BaasWithdrawalWalletRcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaasWithdrawalWalletRcRequest.Merge(dst, src)
}
func (m *BaasWithdrawalWalletRcRequest) XXX_Size() int {
	return xxx_messageInfo_BaasWithdrawalWalletRcRequest.Size(m)
}
func (m *BaasWithdrawalWalletRcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BaasWithdrawalWalletRcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BaasWithdrawalWalletRcRequest proto.InternalMessageInfo

func (m *BaasWithdrawalWalletRcRequest) GetOrders() []*common.BaasWithdrawalOrder {
	if m != nil {
		return m.Orders
	}
	return nil
}

func (m *BaasWithdrawalWalletRcRequest) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *BaasWithdrawalWalletRcRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *BaasWithdrawalWalletRcRequest) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

type BaasWithdrawalRcSign struct {
	OrderId              string   `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	RcSign               string   `protobuf:"bytes,2,opt,name=rc_sign,json=rcSign,proto3" json:"rc_sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BaasWithdrawalRcSign) Reset()         { *m = BaasWithdrawalRcSign{} }
func (m *BaasWithdrawalRcSign) String() string { return proto.CompactTextString(m) }
func (*BaasWithdrawalRcSign) ProtoMessage()    {}
func (*BaasWithdrawalRcSign) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_1722113f95f93833, []int{21}
}
func (m *BaasWithdrawalRcSign) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BaasWithdrawalRcSign.Unmarshal(m, b)
}
func (m *BaasWithdrawalRcSign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BaasWithdrawalRcSign.Marshal(b, m, deterministic)
}
func (dst *BaasWithdrawalRcSign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaasWithdrawalRcSign.Merge(dst, src)
}
func (m *BaasWithdrawalRcSign) XXX_Size() int {
	return xxx_messageInfo_BaasWithdrawalRcSign.Size(m)
}
func (m *BaasWithdrawalRcSign) XXX_DiscardUnknown() {
	xxx_messageInfo_BaasWithdrawalRcSign.DiscardUnknown(m)
}

var xxx_messageInfo_BaasWithdrawalRcSign proto.InternalMessageInfo

func (m *BaasWithdrawalRcSign) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *BaasWithdrawalRcSign) GetRcSign() string {
	if m != nil {
		return m.RcSign
	}
	return ""
}

type BaasWithdrawalWalletRcReply struct {
	Code                 common.ReturnCode       `protobuf:"varint,1,opt,name=code,proto3,enum=common.ReturnCode" json:"code,omitempty"`
	Msg                  string                  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	RcSigns              []*BaasWithdrawalRcSign `protobuf:"bytes,3,rep,name=rc_signs,json=rcSigns,proto3" json:"rc_signs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *BaasWithdrawalWalletRcReply) Reset()         { *m = BaasWithdrawalWalletRcReply{} }
func (m *BaasWithdrawalWalletRcReply) String() string { return proto.CompactTextString(m) }
func (*BaasWithdrawalWalletRcReply) ProtoMessage()    {}
func (*BaasWithdrawalWalletRcReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_1722113f95f93833, []int{22}
}
func (m *BaasWithdrawalWalletRcReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BaasWithdrawalWalletRcReply.Unmarshal(m, b)
}
func (m *BaasWithdrawalWalletRcReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BaasWithdrawalWalletRcReply.Marshal(b, m, deterministic)
}
func (dst *BaasWithdrawalWalletRcReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaasWithdrawalWalletRcReply.Merge(dst, src)
}
func (m *BaasWithdrawalWalletRcReply) XXX_Size() int {
	return xxx_messageInfo_BaasWithdrawalWalletRcReply.Size(m)
}
func (m *BaasWithdrawalWalletRcReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BaasWithdrawalWalletRcReply.DiscardUnknown(m)
}

var xxx_messageInfo_BaasWithdrawalWalletRcReply proto.InternalMessageInfo

func (m *BaasWithdrawalWalletRcReply) GetCode() common.ReturnCode {
	if m != nil {
		return m.Code
	}
	return common.ReturnCode_SUCCESS
}

func (m *BaasWithdrawalWalletRcReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *BaasWithdrawalWalletRcReply) GetRcSigns() []*BaasWithdrawalRcSign {
	if m != nil {
		return m.RcSigns
	}
	return nil
}

type AschLikeWalletRcRequest struct {
	WithdrawlId          int64                       `protobuf:"varint,1,opt,name=withdrawl_id,json=withdrawlId,proto3" json:"withdrawl_id,omitempty"`
	SignReq              *common.AschLikeSignRequest `protobuf:"bytes,2,opt,name=sign_req,json=signReq,proto3" json:"sign_req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *AschLikeWalletRcRequest) Reset()         { *m = AschLikeWalletRcRequest{} }
func (m *AschLikeWalletRcRequest) String() string { return proto.CompactTextString(m) }
func (*AschLikeWalletRcRequest) ProtoMessage()    {}
func (*AschLikeWalletRcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_1722113f95f93833, []int{23}
}
func (m *AschLikeWalletRcRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AschLikeWalletRcRequest.Unmarshal(m, b)
}
func (m *AschLikeWalletRcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AschLikeWalletRcRequest.Marshal(b, m, deterministic)
}
func (dst *AschLikeWalletRcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AschLikeWalletRcRequest.Merge(dst, src)
}
func (m *AschLikeWalletRcRequest) XXX_Size() int {
	return xxx_messageInfo_AschLikeWalletRcRequest.Size(m)
}
func (m *AschLikeWalletRcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AschLikeWalletRcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AschLikeWalletRcRequest proto.InternalMessageInfo

func (m *AschLikeWalletRcRequest) GetWithdrawlId() int64 {
	if m != nil {
		return m.WithdrawlId
	}
	return 0
}

func (m *AschLikeWalletRcRequest) GetSignReq() *common.AschLikeSignRequest {
	if m != nil {
		return m.SignReq
	}
	return nil
}

type IotexLikeWalletRcRequest struct {
	WithdrawlId          int64                        `protobuf:"varint,1,opt,name=withdrawl_id,json=withdrawlId,proto3" json:"withdrawl_id,omitempty"`
	ChainName            string                       `protobuf:"bytes,2,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	SignReq              *common.IotexLikeSignRequest `protobuf:"bytes,3,opt,name=sign_req,json=signReq,proto3" json:"sign_req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *IotexLikeWalletRcRequest) Reset()         { *m = IotexLikeWalletRcRequest{} }
func (m *IotexLikeWalletRcRequest) String() string { return proto.CompactTextString(m) }
func (*IotexLikeWalletRcRequest) ProtoMessage()    {}
func (*IotexLikeWalletRcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_1722113f95f93833, []int{24}
}
func (m *IotexLikeWalletRcRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IotexLikeWalletRcRequest.Unmarshal(m, b)
}
func (m *IotexLikeWalletRcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IotexLikeWalletRcRequest.Marshal(b, m, deterministic)
}
func (dst *IotexLikeWalletRcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IotexLikeWalletRcRequest.Merge(dst, src)
}
func (m *IotexLikeWalletRcRequest) XXX_Size() int {
	return xxx_messageInfo_IotexLikeWalletRcRequest.Size(m)
}
func (m *IotexLikeWalletRcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IotexLikeWalletRcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IotexLikeWalletRcRequest proto.InternalMessageInfo

func (m *IotexLikeWalletRcRequest) GetWithdrawlId() int64 {
	if m != nil {
		return m.WithdrawlId
	}
	return 0
}

func (m *IotexLikeWalletRcRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *IotexLikeWalletRcRequest) GetSignReq() *common.IotexLikeSignRequest {
	if m != nil {
		return m.SignReq
	}
	return nil
}

type Xrc20LikeWalletRcRequest struct {
	WithdrawlId          int64                        `protobuf:"varint,1,opt,name=withdrawl_id,json=withdrawlId,proto3" json:"withdrawl_id,omitempty"`
	ChainName            string                       `protobuf:"bytes,2,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	SignReq              *common.Xrc20LikeSignRequest `protobuf:"bytes,3,opt,name=sign_req,json=signReq,proto3" json:"sign_req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *Xrc20LikeWalletRcRequest) Reset()         { *m = Xrc20LikeWalletRcRequest{} }
func (m *Xrc20LikeWalletRcRequest) String() string { return proto.CompactTextString(m) }
func (*Xrc20LikeWalletRcRequest) ProtoMessage()    {}
func (*Xrc20LikeWalletRcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_1722113f95f93833, []int{25}
}
func (m *Xrc20LikeWalletRcRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Xrc20LikeWalletRcRequest.Unmarshal(m, b)
}
func (m *Xrc20LikeWalletRcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Xrc20LikeWalletRcRequest.Marshal(b, m, deterministic)
}
func (dst *Xrc20LikeWalletRcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Xrc20LikeWalletRcRequest.Merge(dst, src)
}
func (m *Xrc20LikeWalletRcRequest) XXX_Size() int {
	return xxx_messageInfo_Xrc20LikeWalletRcRequest.Size(m)
}
func (m *Xrc20LikeWalletRcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_Xrc20LikeWalletRcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_Xrc20LikeWalletRcRequest proto.InternalMessageInfo

func (m *Xrc20LikeWalletRcRequest) GetWithdrawlId() int64 {
	if m != nil {
		return m.WithdrawlId
	}
	return 0
}

func (m *Xrc20LikeWalletRcRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *Xrc20LikeWalletRcRequest) GetSignReq() *common.Xrc20LikeSignRequest {
	if m != nil {
		return m.SignReq
	}
	return nil
}

type XtzWalletRcRequest struct {
	WithdrawlId          int64                  `protobuf:"varint,1,opt,name=withdrawl_id,json=withdrawlId,proto3" json:"withdrawl_id,omitempty"`
	SignReq              *common.XtzSignRequest `protobuf:"bytes,2,opt,name=sign_req,json=signReq,proto3" json:"sign_req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *XtzWalletRcRequest) Reset()         { *m = XtzWalletRcRequest{} }
func (m *XtzWalletRcRequest) String() string { return proto.CompactTextString(m) }
func (*XtzWalletRcRequest) ProtoMessage()    {}
func (*XtzWalletRcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_risk_1722113f95f93833, []int{26}
}
func (m *XtzWalletRcRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XtzWalletRcRequest.Unmarshal(m, b)
}
func (m *XtzWalletRcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XtzWalletRcRequest.Marshal(b, m, deterministic)
}
func (dst *XtzWalletRcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XtzWalletRcRequest.Merge(dst, src)
}
func (m *XtzWalletRcRequest) XXX_Size() int {
	return xxx_messageInfo_XtzWalletRcRequest.Size(m)
}
func (m *XtzWalletRcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_XtzWalletRcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_XtzWalletRcRequest proto.InternalMessageInfo

func (m *XtzWalletRcRequest) GetWithdrawlId() int64 {
	if m != nil {
		return m.WithdrawlId
	}
	return 0
}

func (m *XtzWalletRcRequest) GetSignReq() *common.XtzSignRequest {
	if m != nil {
		return m.SignReq
	}
	return nil
}

func init() {
	proto.RegisterType((*WithdrawlSignatureRcRequest)(nil), "risk.WithdrawlSignatureRcRequest")
	proto.RegisterType((*SignTxRcRequest)(nil), "risk.SignTxRcRequest")
	proto.RegisterType((*UtxoWalletRcRequest)(nil), "risk.UtxoWalletRcRequest")
	proto.RegisterType((*EthWalletRcRequest)(nil), "risk.EthWalletRcRequest")
	proto.RegisterType((*Erc20WalletRcRequest)(nil), "risk.Erc20WalletRcRequest")
	proto.RegisterType((*UtxoMultiWalletRcRequest)(nil), "risk.UtxoMultiWalletRcRequest")
	proto.RegisterType((*EthMultiWalletRcRequest)(nil), "risk.EthMultiWalletRcRequest")
	proto.RegisterType((*Erc20MultiWalletRcRequest)(nil), "risk.Erc20MultiWalletRcRequest")
	proto.RegisterType((*EosLikeWalletRcRequest)(nil), "risk.EosLikeWalletRcRequest")
	proto.RegisterType((*TronWalletRcRequest)(nil), "risk.TronWalletRcRequest")
	proto.RegisterType((*RippleWalletRcRequest)(nil), "risk.RippleWalletRcRequest")
	proto.RegisterType((*RippleMultiWalletRcRequest)(nil), "risk.RippleMultiWalletRcRequest")
	proto.RegisterType((*OnlineWalletTokenWalletRcRequest)(nil), "risk.OnlineWalletTokenWalletRcRequest")
	proto.RegisterType((*OntWalletRcRequest)(nil), "risk.OntWalletRcRequest")
	proto.RegisterType((*OntMultiWalletRcRequest)(nil), "risk.OntMultiWalletRcRequest")
	proto.RegisterType((*VolumeWalletRcRequest)(nil), "risk.VolumeWalletRcRequest")
	proto.RegisterType((*EthLikeWalletRcRequest)(nil), "risk.EthLikeWalletRcRequest")
	proto.RegisterType((*Erc20LikeWalletRcRequest)(nil), "risk.Erc20LikeWalletRcRequest")
	proto.RegisterType((*AtomWalletRcRequest)(nil), "risk.AtomWalletRcRequest")
	proto.RegisterType((*AtomMultiWalletRcRequest)(nil), "risk.AtomMultiWalletRcRequest")
	proto.RegisterType((*BaasWithdrawalWalletRcRequest)(nil), "risk.BaasWithdrawalWalletRcRequest")
	proto.RegisterType((*BaasWithdrawalRcSign)(nil), "risk.BaasWithdrawalRcSign")
	proto.RegisterType((*BaasWithdrawalWalletRcReply)(nil), "risk.BaasWithdrawalWalletRcReply")
	proto.RegisterType((*AschLikeWalletRcRequest)(nil), "risk.AschLikeWalletRcRequest")
	proto.RegisterType((*IotexLikeWalletRcRequest)(nil), "risk.IotexLikeWalletRcRequest")
	proto.RegisterType((*Xrc20LikeWalletRcRequest)(nil), "risk.Xrc20LikeWalletRcRequest")
	proto.RegisterType((*XtzWalletRcRequest)(nil), "risk.XtzWalletRcRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RiskClient is the client API for Risk service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RiskClient interface {
	GetPrivateKey(ctx context.Context, in *common.GetPrivateKeyRequest, opts ...grpc.CallOption) (*common.GetPrivateKeyReply, error)
	// UTXO模型的一类代币的签名接口
	UtxoMultiSign(ctx context.Context, in *common.UtxoMultiSignRequest, opts ...grpc.CallOption) (*common.UtxoMultiSignReply, error)
	EthMultiSign(ctx context.Context, in *common.EthMultiSignRequest, opts ...grpc.CallOption) (*common.EthMultiSignReply, error)
	Erc20MultiSign(ctx context.Context, in *common.Erc20MultiSignRequest, opts ...grpc.CallOption) (*common.Erc20MultiSignReply, error)
	// eos like
	EosLikeSign(ctx context.Context, in *common.EosLikeSignRequest, opts ...grpc.CallOption) (*common.EosLikeSignReply, error)
	// Ripple  MultiSign
	RippleMultiSign(ctx context.Context, in *common.RippleMultiSignRequest, opts ...grpc.CallOption) (*common.RippleMultiSignReply, error)
	GetBeamNewAddressSign(ctx context.Context, in *common.NewAddressSignRequest, opts ...grpc.CallOption) (*common.RequestSignReply, error)
	GetCoboNewAddressSign(ctx context.Context, in *common.NewAddressSignRequest, opts ...grpc.CallOption) (*common.RequestSignReply, error)
	GetCoboApiNewAddressSign(ctx context.Context, in *common.NewAddressSignRequest, opts ...grpc.CallOption) (*common.RequestSignReply, error)
	GetBaasApiNewAddressSign(ctx context.Context, in *common.NewAddressSignRequest, opts ...grpc.CallOption) (*common.RequestSignReply, error)
	// Ont MultiSign
	OntMultiSign(ctx context.Context, in *common.OntMultiSignRequest, opts ...grpc.CallOption) (*common.OntMultiSignReply, error)
	// Atom MultiSign
	AtomMultiSign(ctx context.Context, in *common.AtomMultiSignRequest, opts ...grpc.CallOption) (*common.AtomMultiSignReply, error)
	// Atom MultiSign
	BnbMultiSign(ctx context.Context, in *common.AtomMultiSignRequest, opts ...grpc.CallOption) (*common.AtomMultiSignReply, error)
	PocMultiSign(ctx context.Context, in *common.AtomMultiSignRequest, opts ...grpc.CallOption) (*common.AtomMultiSignReply, error)
	GetNewAddressSign(ctx context.Context, in *common.NewAddressSignRequest, opts ...grpc.CallOption) (*common.RequestSignReply, error)
	GetDepositNotifyRequestSign(ctx context.Context, in *common.DepositNotifyRequestSignRequest, opts ...grpc.CallOption) (*common.RequestSignReply, error)
	GetBhWithdrawalRequestSign(ctx context.Context, in *common.BhWithdrawalRequestSignRequest, opts ...grpc.CallOption) (*common.RequestSignReply, error)
	UtxoWalletRc(ctx context.Context, in *UtxoWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error)
	EthWalletRc(ctx context.Context, in *EthWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error)
	EtcWalletRc(ctx context.Context, in *EthWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error)
	Erc20WalletRc(ctx context.Context, in *Erc20WalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error)
	UtxoMultiWalletRc(ctx context.Context, in *UtxoMultiWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error)
	EthMultiWalletRc(ctx context.Context, in *EthMultiWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error)
	Erc20MultiWalletRc(ctx context.Context, in *Erc20MultiWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error)
	EosLikeWalletRc(ctx context.Context, in *EosLikeWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error)
	TronWalletRc(ctx context.Context, in *TronWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error)
	EthLikeWalletRc(ctx context.Context, in *EthLikeWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error)
	Erc20LikeWalletRc(ctx context.Context, in *Erc20LikeWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error)
	// Ripple rc
	RippleWalletRc(ctx context.Context, in *RippleWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error)
	RippleMultiWalletRc(ctx context.Context, in *RippleMultiWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error)
	OnlineWalletTokenWalletRc(ctx context.Context, in *OnlineWalletTokenWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error)
	OnlineWalletTokenTypeWalletRc(ctx context.Context, in *OnlineWalletTokenWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error)
	OntWalletRc(ctx context.Context, in *OntWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error)
	OntMultiWalletRc(ctx context.Context, in *OntMultiWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error)
	AtomWalletRc(ctx context.Context, in *AtomWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error)
	AtomMultiWalletRc(ctx context.Context, in *AtomMultiWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error)
	BnbWalletRc(ctx context.Context, in *AtomWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error)
	BnbMultiWalletRc(ctx context.Context, in *AtomMultiWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error)
	PocWalletRc(ctx context.Context, in *AtomWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error)
	PocMultiWalletRc(ctx context.Context, in *AtomMultiWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error)
	// VolumeWalletRc volume rc
	VolumeWalletRc(ctx context.Context, in *VolumeWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error)
	// AschLikeWalletRc asch rc
	AschLikeWalletRc(ctx context.Context, in *AschLikeWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error)
	WithdrawlSignatureRc(ctx context.Context, in *WithdrawlSignatureRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error)
	SignTxRc(ctx context.Context, in *SignTxRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error)
	MultiSignMsg(ctx context.Context, in *common.MultiSignMsgRequest, opts ...grpc.CallOption) (*common.MultiSignMsgReply, error)
	// get rc signature for baas withdrawal orders
	BaasWithdrawalWalletRc(ctx context.Context, in *BaasWithdrawalWalletRcRequest, opts ...grpc.CallOption) (*BaasWithdrawalWalletRcReply, error)
	// rpc UtxoSignRc(UtxoWalletRcRequest) returns (common.RiskStatusReply);
	// rpc EthSignRc(EthWalletRcRequest) returns (common.RiskStatusReply);
	// rpc EtcSignRc(EthWalletRcRequest) returns (common.RiskStatusReply);
	// rpc Erc20SignRc(Erc20WalletRcRequest) returns (common.RiskStatusReply);
	// rpc UtxoMultiSignRc(UtxoMultiWalletRcRequest) returns (common.RiskStatusReply);
	// rpc EthMultiSignRc(EthMultiWalletRcRequest) returns (common.RiskStatusReply);
	// rpc Erc20MultiSignRc(Erc20MultiWalletRcRequest) returns (common.RiskStatusReply);
	// rpc EosLikeSignRc(EosLikeWalletRcRequest) returns (common.RiskStatusReply);
	IotexLikeWalletRc(ctx context.Context, in *IotexLikeWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error)
	Xrc20LikeWalletRc(ctx context.Context, in *Xrc20LikeWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error)
	XtzWalletRc(ctx context.Context, in *XtzWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error)
}

type riskClient struct {
	cc *grpc.ClientConn
}

func NewRiskClient(cc *grpc.ClientConn) RiskClient {
	return &riskClient{cc}
}

func (c *riskClient) GetPrivateKey(ctx context.Context, in *common.GetPrivateKeyRequest, opts ...grpc.CallOption) (*common.GetPrivateKeyReply, error) {
	out := new(common.GetPrivateKeyReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/GetPrivateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) UtxoMultiSign(ctx context.Context, in *common.UtxoMultiSignRequest, opts ...grpc.CallOption) (*common.UtxoMultiSignReply, error) {
	out := new(common.UtxoMultiSignReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/UtxoMultiSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) EthMultiSign(ctx context.Context, in *common.EthMultiSignRequest, opts ...grpc.CallOption) (*common.EthMultiSignReply, error) {
	out := new(common.EthMultiSignReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/EthMultiSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) Erc20MultiSign(ctx context.Context, in *common.Erc20MultiSignRequest, opts ...grpc.CallOption) (*common.Erc20MultiSignReply, error) {
	out := new(common.Erc20MultiSignReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/Erc20MultiSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) EosLikeSign(ctx context.Context, in *common.EosLikeSignRequest, opts ...grpc.CallOption) (*common.EosLikeSignReply, error) {
	out := new(common.EosLikeSignReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/EosLikeSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) RippleMultiSign(ctx context.Context, in *common.RippleMultiSignRequest, opts ...grpc.CallOption) (*common.RippleMultiSignReply, error) {
	out := new(common.RippleMultiSignReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/RippleMultiSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) GetBeamNewAddressSign(ctx context.Context, in *common.NewAddressSignRequest, opts ...grpc.CallOption) (*common.RequestSignReply, error) {
	out := new(common.RequestSignReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/GetBeamNewAddressSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) GetCoboNewAddressSign(ctx context.Context, in *common.NewAddressSignRequest, opts ...grpc.CallOption) (*common.RequestSignReply, error) {
	out := new(common.RequestSignReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/GetCoboNewAddressSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) GetCoboApiNewAddressSign(ctx context.Context, in *common.NewAddressSignRequest, opts ...grpc.CallOption) (*common.RequestSignReply, error) {
	out := new(common.RequestSignReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/GetCoboApiNewAddressSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) GetBaasApiNewAddressSign(ctx context.Context, in *common.NewAddressSignRequest, opts ...grpc.CallOption) (*common.RequestSignReply, error) {
	out := new(common.RequestSignReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/GetBaasApiNewAddressSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) OntMultiSign(ctx context.Context, in *common.OntMultiSignRequest, opts ...grpc.CallOption) (*common.OntMultiSignReply, error) {
	out := new(common.OntMultiSignReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/OntMultiSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) AtomMultiSign(ctx context.Context, in *common.AtomMultiSignRequest, opts ...grpc.CallOption) (*common.AtomMultiSignReply, error) {
	out := new(common.AtomMultiSignReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/AtomMultiSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) BnbMultiSign(ctx context.Context, in *common.AtomMultiSignRequest, opts ...grpc.CallOption) (*common.AtomMultiSignReply, error) {
	out := new(common.AtomMultiSignReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/BnbMultiSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) PocMultiSign(ctx context.Context, in *common.AtomMultiSignRequest, opts ...grpc.CallOption) (*common.AtomMultiSignReply, error) {
	out := new(common.AtomMultiSignReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/PocMultiSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) GetNewAddressSign(ctx context.Context, in *common.NewAddressSignRequest, opts ...grpc.CallOption) (*common.RequestSignReply, error) {
	out := new(common.RequestSignReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/GetNewAddressSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) GetDepositNotifyRequestSign(ctx context.Context, in *common.DepositNotifyRequestSignRequest, opts ...grpc.CallOption) (*common.RequestSignReply, error) {
	out := new(common.RequestSignReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/GetDepositNotifyRequestSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) GetBhWithdrawalRequestSign(ctx context.Context, in *common.BhWithdrawalRequestSignRequest, opts ...grpc.CallOption) (*common.RequestSignReply, error) {
	out := new(common.RequestSignReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/GetBhWithdrawalRequestSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) UtxoWalletRc(ctx context.Context, in *UtxoWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error) {
	out := new(common.RiskStatusReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/UtxoWalletRc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) EthWalletRc(ctx context.Context, in *EthWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error) {
	out := new(common.RiskStatusReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/EthWalletRc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) EtcWalletRc(ctx context.Context, in *EthWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error) {
	out := new(common.RiskStatusReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/EtcWalletRc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) Erc20WalletRc(ctx context.Context, in *Erc20WalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error) {
	out := new(common.RiskStatusReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/Erc20WalletRc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) UtxoMultiWalletRc(ctx context.Context, in *UtxoMultiWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error) {
	out := new(common.RiskStatusReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/UtxoMultiWalletRc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) EthMultiWalletRc(ctx context.Context, in *EthMultiWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error) {
	out := new(common.RiskStatusReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/EthMultiWalletRc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) Erc20MultiWalletRc(ctx context.Context, in *Erc20MultiWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error) {
	out := new(common.RiskStatusReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/Erc20MultiWalletRc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) EosLikeWalletRc(ctx context.Context, in *EosLikeWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error) {
	out := new(common.RiskStatusReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/EosLikeWalletRc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) TronWalletRc(ctx context.Context, in *TronWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error) {
	out := new(common.RiskStatusReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/TronWalletRc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) EthLikeWalletRc(ctx context.Context, in *EthLikeWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error) {
	out := new(common.RiskStatusReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/EthLikeWalletRc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) Erc20LikeWalletRc(ctx context.Context, in *Erc20LikeWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error) {
	out := new(common.RiskStatusReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/Erc20LikeWalletRc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) RippleWalletRc(ctx context.Context, in *RippleWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error) {
	out := new(common.RiskStatusReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/RippleWalletRc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) RippleMultiWalletRc(ctx context.Context, in *RippleMultiWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error) {
	out := new(common.RiskStatusReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/RippleMultiWalletRc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) OnlineWalletTokenWalletRc(ctx context.Context, in *OnlineWalletTokenWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error) {
	out := new(common.RiskStatusReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/OnlineWalletTokenWalletRc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) OnlineWalletTokenTypeWalletRc(ctx context.Context, in *OnlineWalletTokenWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error) {
	out := new(common.RiskStatusReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/OnlineWalletTokenTypeWalletRc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) OntWalletRc(ctx context.Context, in *OntWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error) {
	out := new(common.RiskStatusReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/OntWalletRc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) OntMultiWalletRc(ctx context.Context, in *OntMultiWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error) {
	out := new(common.RiskStatusReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/OntMultiWalletRc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) AtomWalletRc(ctx context.Context, in *AtomWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error) {
	out := new(common.RiskStatusReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/AtomWalletRc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) AtomMultiWalletRc(ctx context.Context, in *AtomMultiWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error) {
	out := new(common.RiskStatusReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/AtomMultiWalletRc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) BnbWalletRc(ctx context.Context, in *AtomWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error) {
	out := new(common.RiskStatusReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/BnbWalletRc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) BnbMultiWalletRc(ctx context.Context, in *AtomMultiWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error) {
	out := new(common.RiskStatusReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/BnbMultiWalletRc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) PocWalletRc(ctx context.Context, in *AtomWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error) {
	out := new(common.RiskStatusReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/PocWalletRc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) PocMultiWalletRc(ctx context.Context, in *AtomMultiWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error) {
	out := new(common.RiskStatusReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/PocMultiWalletRc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) VolumeWalletRc(ctx context.Context, in *VolumeWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error) {
	out := new(common.RiskStatusReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/VolumeWalletRc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) AschLikeWalletRc(ctx context.Context, in *AschLikeWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error) {
	out := new(common.RiskStatusReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/AschLikeWalletRc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) WithdrawlSignatureRc(ctx context.Context, in *WithdrawlSignatureRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error) {
	out := new(common.RiskStatusReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/WithdrawlSignatureRc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) SignTxRc(ctx context.Context, in *SignTxRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error) {
	out := new(common.RiskStatusReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/SignTxRc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) MultiSignMsg(ctx context.Context, in *common.MultiSignMsgRequest, opts ...grpc.CallOption) (*common.MultiSignMsgReply, error) {
	out := new(common.MultiSignMsgReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/MultiSignMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) BaasWithdrawalWalletRc(ctx context.Context, in *BaasWithdrawalWalletRcRequest, opts ...grpc.CallOption) (*BaasWithdrawalWalletRcReply, error) {
	out := new(BaasWithdrawalWalletRcReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/BaasWithdrawalWalletRc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) IotexLikeWalletRc(ctx context.Context, in *IotexLikeWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error) {
	out := new(common.RiskStatusReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/IotexLikeWalletRc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) Xrc20LikeWalletRc(ctx context.Context, in *Xrc20LikeWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error) {
	out := new(common.RiskStatusReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/Xrc20LikeWalletRc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riskClient) XtzWalletRc(ctx context.Context, in *XtzWalletRcRequest, opts ...grpc.CallOption) (*common.RiskStatusReply, error) {
	out := new(common.RiskStatusReply)
	err := c.cc.Invoke(ctx, "/risk.Risk/XtzWalletRc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RiskServer is the server API for Risk service.
type RiskServer interface {
	GetPrivateKey(context.Context, *common.GetPrivateKeyRequest) (*common.GetPrivateKeyReply, error)
	// UTXO模型的一类代币的签名接口
	UtxoMultiSign(context.Context, *common.UtxoMultiSignRequest) (*common.UtxoMultiSignReply, error)
	EthMultiSign(context.Context, *common.EthMultiSignRequest) (*common.EthMultiSignReply, error)
	Erc20MultiSign(context.Context, *common.Erc20MultiSignRequest) (*common.Erc20MultiSignReply, error)
	// eos like
	EosLikeSign(context.Context, *common.EosLikeSignRequest) (*common.EosLikeSignReply, error)
	// Ripple  MultiSign
	RippleMultiSign(context.Context, *common.RippleMultiSignRequest) (*common.RippleMultiSignReply, error)
	GetBeamNewAddressSign(context.Context, *common.NewAddressSignRequest) (*common.RequestSignReply, error)
	GetCoboNewAddressSign(context.Context, *common.NewAddressSignRequest) (*common.RequestSignReply, error)
	GetCoboApiNewAddressSign(context.Context, *common.NewAddressSignRequest) (*common.RequestSignReply, error)
	GetBaasApiNewAddressSign(context.Context, *common.NewAddressSignRequest) (*common.RequestSignReply, error)
	// Ont MultiSign
	OntMultiSign(context.Context, *common.OntMultiSignRequest) (*common.OntMultiSignReply, error)
	// Atom MultiSign
	AtomMultiSign(context.Context, *common.AtomMultiSignRequest) (*common.AtomMultiSignReply, error)
	// Atom MultiSign
	BnbMultiSign(context.Context, *common.AtomMultiSignRequest) (*common.AtomMultiSignReply, error)
	PocMultiSign(context.Context, *common.AtomMultiSignRequest) (*common.AtomMultiSignReply, error)
	GetNewAddressSign(context.Context, *common.NewAddressSignRequest) (*common.RequestSignReply, error)
	GetDepositNotifyRequestSign(context.Context, *common.DepositNotifyRequestSignRequest) (*common.RequestSignReply, error)
	GetBhWithdrawalRequestSign(context.Context, *common.BhWithdrawalRequestSignRequest) (*common.RequestSignReply, error)
	UtxoWalletRc(context.Context, *UtxoWalletRcRequest) (*common.RiskStatusReply, error)
	EthWalletRc(context.Context, *EthWalletRcRequest) (*common.RiskStatusReply, error)
	EtcWalletRc(context.Context, *EthWalletRcRequest) (*common.RiskStatusReply, error)
	Erc20WalletRc(context.Context, *Erc20WalletRcRequest) (*common.RiskStatusReply, error)
	UtxoMultiWalletRc(context.Context, *UtxoMultiWalletRcRequest) (*common.RiskStatusReply, error)
	EthMultiWalletRc(context.Context, *EthMultiWalletRcRequest) (*common.RiskStatusReply, error)
	Erc20MultiWalletRc(context.Context, *Erc20MultiWalletRcRequest) (*common.RiskStatusReply, error)
	EosLikeWalletRc(context.Context, *EosLikeWalletRcRequest) (*common.RiskStatusReply, error)
	TronWalletRc(context.Context, *TronWalletRcRequest) (*common.RiskStatusReply, error)
	EthLikeWalletRc(context.Context, *EthLikeWalletRcRequest) (*common.RiskStatusReply, error)
	Erc20LikeWalletRc(context.Context, *Erc20LikeWalletRcRequest) (*common.RiskStatusReply, error)
	// Ripple rc
	RippleWalletRc(context.Context, *RippleWalletRcRequest) (*common.RiskStatusReply, error)
	RippleMultiWalletRc(context.Context, *RippleMultiWalletRcRequest) (*common.RiskStatusReply, error)
	OnlineWalletTokenWalletRc(context.Context, *OnlineWalletTokenWalletRcRequest) (*common.RiskStatusReply, error)
	OnlineWalletTokenTypeWalletRc(context.Context, *OnlineWalletTokenWalletRcRequest) (*common.RiskStatusReply, error)
	OntWalletRc(context.Context, *OntWalletRcRequest) (*common.RiskStatusReply, error)
	OntMultiWalletRc(context.Context, *OntMultiWalletRcRequest) (*common.RiskStatusReply, error)
	AtomWalletRc(context.Context, *AtomWalletRcRequest) (*common.RiskStatusReply, error)
	AtomMultiWalletRc(context.Context, *AtomMultiWalletRcRequest) (*common.RiskStatusReply, error)
	BnbWalletRc(context.Context, *AtomWalletRcRequest) (*common.RiskStatusReply, error)
	BnbMultiWalletRc(context.Context, *AtomMultiWalletRcRequest) (*common.RiskStatusReply, error)
	PocWalletRc(context.Context, *AtomWalletRcRequest) (*common.RiskStatusReply, error)
	PocMultiWalletRc(context.Context, *AtomMultiWalletRcRequest) (*common.RiskStatusReply, error)
	// VolumeWalletRc volume rc
	VolumeWalletRc(context.Context, *VolumeWalletRcRequest) (*common.RiskStatusReply, error)
	// AschLikeWalletRc asch rc
	AschLikeWalletRc(context.Context, *AschLikeWalletRcRequest) (*common.RiskStatusReply, error)
	WithdrawlSignatureRc(context.Context, *WithdrawlSignatureRcRequest) (*common.RiskStatusReply, error)
	SignTxRc(context.Context, *SignTxRcRequest) (*common.RiskStatusReply, error)
	MultiSignMsg(context.Context, *common.MultiSignMsgRequest) (*common.MultiSignMsgReply, error)
	// get rc signature for baas withdrawal orders
	BaasWithdrawalWalletRc(context.Context, *BaasWithdrawalWalletRcRequest) (*BaasWithdrawalWalletRcReply, error)
	// rpc UtxoSignRc(UtxoWalletRcRequest) returns (common.RiskStatusReply);
	// rpc EthSignRc(EthWalletRcRequest) returns (common.RiskStatusReply);
	// rpc EtcSignRc(EthWalletRcRequest) returns (common.RiskStatusReply);
	// rpc Erc20SignRc(Erc20WalletRcRequest) returns (common.RiskStatusReply);
	// rpc UtxoMultiSignRc(UtxoMultiWalletRcRequest) returns (common.RiskStatusReply);
	// rpc EthMultiSignRc(EthMultiWalletRcRequest) returns (common.RiskStatusReply);
	// rpc Erc20MultiSignRc(Erc20MultiWalletRcRequest) returns (common.RiskStatusReply);
	// rpc EosLikeSignRc(EosLikeWalletRcRequest) returns (common.RiskStatusReply);
	IotexLikeWalletRc(context.Context, *IotexLikeWalletRcRequest) (*common.RiskStatusReply, error)
	Xrc20LikeWalletRc(context.Context, *Xrc20LikeWalletRcRequest) (*common.RiskStatusReply, error)
	XtzWalletRc(context.Context, *XtzWalletRcRequest) (*common.RiskStatusReply, error)
}

func RegisterRiskServer(s *grpc.Server, srv RiskServer) {
	s.RegisterService(&_Risk_serviceDesc, srv)
}

func _Risk_GetPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetPrivateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).GetPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/GetPrivateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).GetPrivateKey(ctx, req.(*common.GetPrivateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_UtxoMultiSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.UtxoMultiSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).UtxoMultiSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/UtxoMultiSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).UtxoMultiSign(ctx, req.(*common.UtxoMultiSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_EthMultiSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.EthMultiSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).EthMultiSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/EthMultiSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).EthMultiSign(ctx, req.(*common.EthMultiSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_Erc20MultiSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Erc20MultiSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).Erc20MultiSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/Erc20MultiSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).Erc20MultiSign(ctx, req.(*common.Erc20MultiSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_EosLikeSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.EosLikeSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).EosLikeSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/EosLikeSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).EosLikeSign(ctx, req.(*common.EosLikeSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_RippleMultiSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RippleMultiSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).RippleMultiSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/RippleMultiSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).RippleMultiSign(ctx, req.(*common.RippleMultiSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_GetBeamNewAddressSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.NewAddressSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).GetBeamNewAddressSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/GetBeamNewAddressSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).GetBeamNewAddressSign(ctx, req.(*common.NewAddressSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_GetCoboNewAddressSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.NewAddressSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).GetCoboNewAddressSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/GetCoboNewAddressSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).GetCoboNewAddressSign(ctx, req.(*common.NewAddressSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_GetCoboApiNewAddressSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.NewAddressSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).GetCoboApiNewAddressSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/GetCoboApiNewAddressSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).GetCoboApiNewAddressSign(ctx, req.(*common.NewAddressSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_GetBaasApiNewAddressSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.NewAddressSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).GetBaasApiNewAddressSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/GetBaasApiNewAddressSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).GetBaasApiNewAddressSign(ctx, req.(*common.NewAddressSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_OntMultiSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.OntMultiSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).OntMultiSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/OntMultiSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).OntMultiSign(ctx, req.(*common.OntMultiSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_AtomMultiSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.AtomMultiSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).AtomMultiSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/AtomMultiSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).AtomMultiSign(ctx, req.(*common.AtomMultiSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_BnbMultiSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.AtomMultiSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).BnbMultiSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/BnbMultiSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).BnbMultiSign(ctx, req.(*common.AtomMultiSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_PocMultiSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.AtomMultiSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).PocMultiSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/PocMultiSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).PocMultiSign(ctx, req.(*common.AtomMultiSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_GetNewAddressSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.NewAddressSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).GetNewAddressSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/GetNewAddressSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).GetNewAddressSign(ctx, req.(*common.NewAddressSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_GetDepositNotifyRequestSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.DepositNotifyRequestSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).GetDepositNotifyRequestSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/GetDepositNotifyRequestSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).GetDepositNotifyRequestSign(ctx, req.(*common.DepositNotifyRequestSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_GetBhWithdrawalRequestSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.BhWithdrawalRequestSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).GetBhWithdrawalRequestSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/GetBhWithdrawalRequestSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).GetBhWithdrawalRequestSign(ctx, req.(*common.BhWithdrawalRequestSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_UtxoWalletRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UtxoWalletRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).UtxoWalletRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/UtxoWalletRc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).UtxoWalletRc(ctx, req.(*UtxoWalletRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_EthWalletRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthWalletRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).EthWalletRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/EthWalletRc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).EthWalletRc(ctx, req.(*EthWalletRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_EtcWalletRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthWalletRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).EtcWalletRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/EtcWalletRc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).EtcWalletRc(ctx, req.(*EthWalletRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_Erc20WalletRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Erc20WalletRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).Erc20WalletRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/Erc20WalletRc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).Erc20WalletRc(ctx, req.(*Erc20WalletRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_UtxoMultiWalletRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UtxoMultiWalletRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).UtxoMultiWalletRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/UtxoMultiWalletRc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).UtxoMultiWalletRc(ctx, req.(*UtxoMultiWalletRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_EthMultiWalletRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthMultiWalletRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).EthMultiWalletRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/EthMultiWalletRc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).EthMultiWalletRc(ctx, req.(*EthMultiWalletRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_Erc20MultiWalletRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Erc20MultiWalletRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).Erc20MultiWalletRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/Erc20MultiWalletRc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).Erc20MultiWalletRc(ctx, req.(*Erc20MultiWalletRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_EosLikeWalletRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EosLikeWalletRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).EosLikeWalletRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/EosLikeWalletRc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).EosLikeWalletRc(ctx, req.(*EosLikeWalletRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_TronWalletRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TronWalletRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).TronWalletRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/TronWalletRc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).TronWalletRc(ctx, req.(*TronWalletRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_EthLikeWalletRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthLikeWalletRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).EthLikeWalletRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/EthLikeWalletRc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).EthLikeWalletRc(ctx, req.(*EthLikeWalletRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_Erc20LikeWalletRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Erc20LikeWalletRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).Erc20LikeWalletRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/Erc20LikeWalletRc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).Erc20LikeWalletRc(ctx, req.(*Erc20LikeWalletRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_RippleWalletRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RippleWalletRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).RippleWalletRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/RippleWalletRc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).RippleWalletRc(ctx, req.(*RippleWalletRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_RippleMultiWalletRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RippleMultiWalletRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).RippleMultiWalletRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/RippleMultiWalletRc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).RippleMultiWalletRc(ctx, req.(*RippleMultiWalletRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_OnlineWalletTokenWalletRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineWalletTokenWalletRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).OnlineWalletTokenWalletRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/OnlineWalletTokenWalletRc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).OnlineWalletTokenWalletRc(ctx, req.(*OnlineWalletTokenWalletRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_OnlineWalletTokenTypeWalletRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineWalletTokenWalletRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).OnlineWalletTokenTypeWalletRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/OnlineWalletTokenTypeWalletRc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).OnlineWalletTokenTypeWalletRc(ctx, req.(*OnlineWalletTokenWalletRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_OntWalletRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OntWalletRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).OntWalletRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/OntWalletRc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).OntWalletRc(ctx, req.(*OntWalletRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_OntMultiWalletRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OntMultiWalletRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).OntMultiWalletRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/OntMultiWalletRc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).OntMultiWalletRc(ctx, req.(*OntMultiWalletRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_AtomWalletRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AtomWalletRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).AtomWalletRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/AtomWalletRc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).AtomWalletRc(ctx, req.(*AtomWalletRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_AtomMultiWalletRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AtomMultiWalletRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).AtomMultiWalletRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/AtomMultiWalletRc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).AtomMultiWalletRc(ctx, req.(*AtomMultiWalletRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_BnbWalletRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AtomWalletRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).BnbWalletRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/BnbWalletRc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).BnbWalletRc(ctx, req.(*AtomWalletRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_BnbMultiWalletRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AtomMultiWalletRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).BnbMultiWalletRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/BnbMultiWalletRc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).BnbMultiWalletRc(ctx, req.(*AtomMultiWalletRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_PocWalletRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AtomWalletRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).PocWalletRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/PocWalletRc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).PocWalletRc(ctx, req.(*AtomWalletRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_PocMultiWalletRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AtomMultiWalletRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).PocMultiWalletRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/PocMultiWalletRc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).PocMultiWalletRc(ctx, req.(*AtomMultiWalletRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_VolumeWalletRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeWalletRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).VolumeWalletRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/VolumeWalletRc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).VolumeWalletRc(ctx, req.(*VolumeWalletRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_AschLikeWalletRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AschLikeWalletRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).AschLikeWalletRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/AschLikeWalletRc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).AschLikeWalletRc(ctx, req.(*AschLikeWalletRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_WithdrawlSignatureRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawlSignatureRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).WithdrawlSignatureRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/WithdrawlSignatureRc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).WithdrawlSignatureRc(ctx, req.(*WithdrawlSignatureRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_SignTxRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignTxRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).SignTxRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/SignTxRc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).SignTxRc(ctx, req.(*SignTxRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_MultiSignMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.MultiSignMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).MultiSignMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/MultiSignMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).MultiSignMsg(ctx, req.(*common.MultiSignMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_BaasWithdrawalWalletRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaasWithdrawalWalletRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).BaasWithdrawalWalletRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/BaasWithdrawalWalletRc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).BaasWithdrawalWalletRc(ctx, req.(*BaasWithdrawalWalletRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_IotexLikeWalletRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IotexLikeWalletRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).IotexLikeWalletRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/IotexLikeWalletRc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).IotexLikeWalletRc(ctx, req.(*IotexLikeWalletRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_Xrc20LikeWalletRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Xrc20LikeWalletRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).Xrc20LikeWalletRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/Xrc20LikeWalletRc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).Xrc20LikeWalletRc(ctx, req.(*Xrc20LikeWalletRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Risk_XtzWalletRc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XtzWalletRcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiskServer).XtzWalletRc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/risk.Risk/XtzWalletRc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiskServer).XtzWalletRc(ctx, req.(*XtzWalletRcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Risk_serviceDesc = grpc.ServiceDesc{
	ServiceName: "risk.Risk",
	HandlerType: (*RiskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPrivateKey",
			Handler:    _Risk_GetPrivateKey_Handler,
		},
		{
			MethodName: "UtxoMultiSign",
			Handler:    _Risk_UtxoMultiSign_Handler,
		},
		{
			MethodName: "EthMultiSign",
			Handler:    _Risk_EthMultiSign_Handler,
		},
		{
			MethodName: "Erc20MultiSign",
			Handler:    _Risk_Erc20MultiSign_Handler,
		},
		{
			MethodName: "EosLikeSign",
			Handler:    _Risk_EosLikeSign_Handler,
		},
		{
			MethodName: "RippleMultiSign",
			Handler:    _Risk_RippleMultiSign_Handler,
		},
		{
			MethodName: "GetBeamNewAddressSign",
			Handler:    _Risk_GetBeamNewAddressSign_Handler,
		},
		{
			MethodName: "GetCoboNewAddressSign",
			Handler:    _Risk_GetCoboNewAddressSign_Handler,
		},
		{
			MethodName: "GetCoboApiNewAddressSign",
			Handler:    _Risk_GetCoboApiNewAddressSign_Handler,
		},
		{
			MethodName: "GetBaasApiNewAddressSign",
			Handler:    _Risk_GetBaasApiNewAddressSign_Handler,
		},
		{
			MethodName: "OntMultiSign",
			Handler:    _Risk_OntMultiSign_Handler,
		},
		{
			MethodName: "AtomMultiSign",
			Handler:    _Risk_AtomMultiSign_Handler,
		},
		{
			MethodName: "BnbMultiSign",
			Handler:    _Risk_BnbMultiSign_Handler,
		},
		{
			MethodName: "PocMultiSign",
			Handler:    _Risk_PocMultiSign_Handler,
		},
		{
			MethodName: "GetNewAddressSign",
			Handler:    _Risk_GetNewAddressSign_Handler,
		},
		{
			MethodName: "GetDepositNotifyRequestSign",
			Handler:    _Risk_GetDepositNotifyRequestSign_Handler,
		},
		{
			MethodName: "GetBhWithdrawalRequestSign",
			Handler:    _Risk_GetBhWithdrawalRequestSign_Handler,
		},
		{
			MethodName: "UtxoWalletRc",
			Handler:    _Risk_UtxoWalletRc_Handler,
		},
		{
			MethodName: "EthWalletRc",
			Handler:    _Risk_EthWalletRc_Handler,
		},
		{
			MethodName: "EtcWalletRc",
			Handler:    _Risk_EtcWalletRc_Handler,
		},
		{
			MethodName: "Erc20WalletRc",
			Handler:    _Risk_Erc20WalletRc_Handler,
		},
		{
			MethodName: "UtxoMultiWalletRc",
			Handler:    _Risk_UtxoMultiWalletRc_Handler,
		},
		{
			MethodName: "EthMultiWalletRc",
			Handler:    _Risk_EthMultiWalletRc_Handler,
		},
		{
			MethodName: "Erc20MultiWalletRc",
			Handler:    _Risk_Erc20MultiWalletRc_Handler,
		},
		{
			MethodName: "EosLikeWalletRc",
			Handler:    _Risk_EosLikeWalletRc_Handler,
		},
		{
			MethodName: "TronWalletRc",
			Handler:    _Risk_TronWalletRc_Handler,
		},
		{
			MethodName: "EthLikeWalletRc",
			Handler:    _Risk_EthLikeWalletRc_Handler,
		},
		{
			MethodName: "Erc20LikeWalletRc",
			Handler:    _Risk_Erc20LikeWalletRc_Handler,
		},
		{
			MethodName: "RippleWalletRc",
			Handler:    _Risk_RippleWalletRc_Handler,
		},
		{
			MethodName: "RippleMultiWalletRc",
			Handler:    _Risk_RippleMultiWalletRc_Handler,
		},
		{
			MethodName: "OnlineWalletTokenWalletRc",
			Handler:    _Risk_OnlineWalletTokenWalletRc_Handler,
		},
		{
			MethodName: "OnlineWalletTokenTypeWalletRc",
			Handler:    _Risk_OnlineWalletTokenTypeWalletRc_Handler,
		},
		{
			MethodName: "OntWalletRc",
			Handler:    _Risk_OntWalletRc_Handler,
		},
		{
			MethodName: "OntMultiWalletRc",
			Handler:    _Risk_OntMultiWalletRc_Handler,
		},
		{
			MethodName: "AtomWalletRc",
			Handler:    _Risk_AtomWalletRc_Handler,
		},
		{
			MethodName: "AtomMultiWalletRc",
			Handler:    _Risk_AtomMultiWalletRc_Handler,
		},
		{
			MethodName: "BnbWalletRc",
			Handler:    _Risk_BnbWalletRc_Handler,
		},
		{
			MethodName: "BnbMultiWalletRc",
			Handler:    _Risk_BnbMultiWalletRc_Handler,
		},
		{
			MethodName: "PocWalletRc",
			Handler:    _Risk_PocWalletRc_Handler,
		},
		{
			MethodName: "PocMultiWalletRc",
			Handler:    _Risk_PocMultiWalletRc_Handler,
		},
		{
			MethodName: "VolumeWalletRc",
			Handler:    _Risk_VolumeWalletRc_Handler,
		},
		{
			MethodName: "AschLikeWalletRc",
			Handler:    _Risk_AschLikeWalletRc_Handler,
		},
		{
			MethodName: "WithdrawlSignatureRc",
			Handler:    _Risk_WithdrawlSignatureRc_Handler,
		},
		{
			MethodName: "SignTxRc",
			Handler:    _Risk_SignTxRc_Handler,
		},
		{
			MethodName: "MultiSignMsg",
			Handler:    _Risk_MultiSignMsg_Handler,
		},
		{
			MethodName: "BaasWithdrawalWalletRc",
			Handler:    _Risk_BaasWithdrawalWalletRc_Handler,
		},
		{
			MethodName: "IotexLikeWalletRc",
			Handler:    _Risk_IotexLikeWalletRc_Handler,
		},
		{
			MethodName: "Xrc20LikeWalletRc",
			Handler:    _Risk_Xrc20LikeWalletRc_Handler,
		},
		{
			MethodName: "XtzWalletRc",
			Handler:    _Risk_XtzWalletRc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "risk.proto",
}

func init() { proto.RegisterFile("risk.proto", fileDescriptor_risk_1722113f95f93833) }

var fileDescriptor_risk_1722113f95f93833 = []byte{
	// 1469 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0x51, 0x73, 0xd3, 0xc6,
	0x13, 0x1f, 0xe1, 0x4c, 0x42, 0xd6, 0x26, 0xc0, 0x85, 0x24, 0x8a, 0x1c, 0x43, 0xc8, 0x7f, 0x86,
	0x3f, 0xc3, 0x83, 0x43, 0x13, 0x68, 0x0b, 0x4f, 0xc4, 0xe0, 0x04, 0x43, 0x88, 0x33, 0x4a, 0x5a,
	0xfc, 0xd0, 0x69, 0x90, 0xe5, 0x6b, 0x24, 0x22, 0x4b, 0x46, 0x3a, 0x13, 0x87, 0xf7, 0x3e, 0xd1,
	0xe9, 0x5b, 0xdf, 0xfa, 0x25, 0xfa, 0x0d, 0x3b, 0x27, 0xe9, 0x64, 0xc9, 0xba, 0x93, 0x89, 0xa2,
	0xbe, 0x24, 0x96, 0xf6, 0xee, 0xf7, 0xdb, 0xbd, 0xdb, 0xbd, 0xdb, 0x5d, 0x01, 0xb8, 0xa6, 0x77,
	0x56, 0x1f, 0xb8, 0x0e, 0x71, 0xd0, 0x0c, 0xfd, 0xad, 0x3c, 0x3b, 0x35, 0x49, 0xbd, 0x6b, 0xe0,
	0x51, 0xdd, 0x74, 0x36, 0xbb, 0xc6, 0x40, 0xdf, 0x3c, 0xd7, 0x2c, 0x0b, 0x93, 0x4d, 0xdd, 0xe9,
	0xf7, 0x1d, 0x7b, 0xd3, 0x1f, 0xeb, 0xb1, 0xa7, 0xe0, 0x5f, 0x00, 0xa0, 0x3c, 0xfd, 0xb6, 0xa9,
	0x9e, 0x79, 0x6a, 0xfb, 0x7f, 0x82, 0x69, 0x1b, 0x5f, 0x25, 0xa8, 0xbe, 0x37, 0x89, 0xd1, 0x73,
	0xb5, 0x73, 0xeb, 0xc8, 0x3c, 0xb5, 0x35, 0x32, 0x74, 0xb1, 0xaa, 0xab, 0xf8, 0xd3, 0x10, 0x7b,
	0x04, 0x3d, 0x87, 0xeb, 0x74, 0xf4, 0x89, 0x8b, 0x3f, 0xc9, 0xd2, 0xba, 0xf4, 0xb0, 0xbc, 0x75,
	0xaf, 0x1e, 0xf2, 0x36, 0x0c, 0x36, 0x51, 0xb3, 0xc2, 0xe1, 0x14, 0x40, 0x9d, 0xa3, 0x13, 0x54,
	0xfc, 0x09, 0xad, 0xc0, 0x5c, 0xd7, 0x38, 0xa1, 0x4f, 0xf2, 0xb5, 0x75, 0xe9, 0xe1, 0xbc, 0x3a,
	0xdb, 0x35, 0xe8, 0x08, 0x2a, 0x70, 0xf5, 0x40, 0x50, 0x0a, 0x04, 0xae, 0x4e, 0x05, 0x1b, 0x8f,
	0xe0, 0x26, 0xfd, 0x7f, 0x3c, 0x1a, 0x2b, 0xb0, 0x02, 0x73, 0x64, 0x74, 0x62, 0x68, 0x9e, 0xe1,
	0xf3, 0xcf, 0xab, 0xb3, 0x64, 0xf4, 0x5a, 0xf3, 0x8c, 0x0d, 0x0b, 0x16, 0x7f, 0x22, 0x23, 0xe7,
	0xbd, 0x6f, 0xe5, 0x78, 0xfc, 0x7d, 0xa8, 0x9c, 0x33, 0x7b, 0x4e, 0xcc, 0x9e, 0x2c, 0xad, 0x97,
	0x1e, 0x96, 0xd4, 0x72, 0xf4, 0xae, 0xd5, 0x43, 0x5b, 0x31, 0x9b, 0xae, 0xf9, 0x36, 0xad, 0x30,
	0x9b, 0x28, 0xe2, 0x51, 0xa0, 0x3e, 0x45, 0x8b, 0x6c, 0xd9, 0xf8, 0x08, 0xa8, 0x49, 0x8c, 0xe9,
	0x64, 0xd2, 0x24, 0xd9, 0x77, 0x29, 0xb2, 0x65, 0x46, 0xd6, 0x24, 0x06, 0x97, 0xcb, 0x86, 0x3b,
	0x4d, 0x57, 0xdf, 0x7a, 0x9c, 0x83, 0x6d, 0x3b, 0xc5, 0x26, 0x47, 0x6c, 0x14, 0x92, 0xcb, 0xf7,
	0x19, 0x64, 0x6a, 0xf7, 0xbb, 0xa1, 0x45, 0xcc, 0x1c, 0xcb, 0xf9, 0x43, 0x8a, 0x73, 0x2d, 0xbe,
	0x9c, 0x3e, 0x2c, 0x97, 0x97, 0xc0, 0x4a, 0x93, 0x18, 0xdf, 0x48, 0x9b, 0x32, 0xf5, 0xfb, 0x14,
	0x6d, 0x35, 0xb6, 0xb0, 0x62, 0xd6, 0x11, 0xac, 0xfa, 0x4b, 0x91, 0x97, 0xf7, 0xc7, 0x14, 0x6f,
	0x2d, 0xb1, 0xc4, 0x62, 0x66, 0x17, 0x96, 0x9b, 0x8e, 0xb7, 0x6f, 0x9e, 0xe1, 0x1c, 0xb4, 0x4f,
	0x53, 0xb4, 0x4a, 0x44, 0x1b, 0x80, 0x72, 0x39, 0x7f, 0x97, 0x60, 0xf1, 0xd8, 0x75, 0xec, 0x1c,
	0x8c, 0xab, 0x70, 0x9d, 0x38, 0x67, 0xd8, 0xa6, 0xe2, 0x20, 0x7e, 0xe7, 0xfc, 0xe7, 0x56, 0x0f,
	0x3d, 0x8e, 0x29, 0x53, 0xf2, 0x95, 0x59, 0xaa, 0xfb, 0x87, 0x0a, 0xa5, 0xe2, 0xea, 0x31, 0x80,
	0x25, 0xd5, 0x1c, 0x0c, 0xac, 0x3c, 0xa6, 0x3f, 0x49, 0x99, 0xbe, 0xca, 0x4c, 0x0f, 0x30, 0xb9,
	0x8c, 0x5f, 0x40, 0x09, 0xa4, 0x79, 0x37, 0xfa, 0x59, 0x8a, 0xf6, 0x6e, 0x92, 0x56, 0xbc, 0xd3,
	0x7f, 0x48, 0xb0, 0xde, 0xb6, 0x2d, 0xd3, 0x0e, 0xcd, 0x3d, 0xa6, 0xeb, 0x96, 0x43, 0x85, 0x66,
	0x4a, 0x85, 0x47, 0x4c, 0x85, 0x23, 0x6c, 0xf7, 0x12, 0x14, 0xae, 0x66, 0x7b, 0x9a, 0x4e, 0x4c,
	0x87, 0x7b, 0x78, 0xb5, 0x6d, 0x52, 0xec, 0xe1, 0xd5, 0xb6, 0x89, 0x28, 0xa8, 0xdb, 0x36, 0xf9,
	0x0f, 0x82, 0x9a, 0xa1, 0x72, 0x59, 0xbf, 0x4a, 0xb0, 0xf4, 0xb3, 0x63, 0x0d, 0xfb, 0xb8, 0x58,
	0x47, 0x7f, 0x92, 0x72, 0xf4, 0xc8, 0xf5, 0x02, 0x3a, 0x91, 0x36, 0xcb, 0x4d, 0x62, 0xe4, 0x8c,
	0xf4, 0x0c, 0x75, 0xb6, 0x53, 0xea, 0xc8, 0x41, 0xdc, 0x85, 0x6c, 0x82, 0x1d, 0x91, 0xfd, 0x83,
	0xa9, 0xc0, 0x83, 0x27, 0xe0, 0x64, 0xa0, 0x5c, 0x56, 0x0b, 0x16, 0x77, 0x88, 0xd3, 0xcf, 0x41,
	0x98, 0x71, 0x3d, 0x53, 0x44, 0xd1, 0x15, 0x46, 0x65, 0x79, 0xdd, 0x2e, 0xe3, 0x0a, 0x8b, 0x60,
	0xb9, 0xbc, 0x7f, 0x4b, 0x50, 0x6b, 0x68, 0x9a, 0x37, 0xce, 0x84, 0x26, 0xd9, 0xb7, 0x61, 0xd6,
	0x71, 0x7b, 0xd8, 0xf5, 0xfc, 0xab, 0x33, 0xe6, 0xcf, 0xc9, 0x69, 0x6d, 0x3a, 0x46, 0x0d, 0x87,
	0xa2, 0x65, 0x98, 0xed, 0x63, 0x62, 0x38, 0xcc, 0x01, 0xc2, 0x27, 0x74, 0x0b, 0x4a, 0x43, 0xd7,
	0x0a, 0x93, 0x26, 0xfa, 0x13, 0xad, 0xc1, 0x3c, 0x31, 0xfb, 0xd8, 0x23, 0x5a, 0x7f, 0x20, 0xcf,
	0xf8, 0xef, 0xc7, 0x2f, 0x36, 0xde, 0xc0, 0x9d, 0x24, 0x8d, 0xea, 0xe7, 0x59, 0xd4, 0xc5, 0x7c,
	0x26, 0xb6, 0x1c, 0xf3, 0xea, 0x9c, 0xff, 0xdc, 0xea, 0xc5, 0x73, 0xb3, 0x6b, 0x89, 0xdc, 0xec,
	0x4f, 0x09, 0xaa, 0x22, 0x53, 0x07, 0xd6, 0x05, 0x7a, 0x00, 0x33, 0xba, 0xd3, 0xc3, 0x3e, 0xde,
	0xc2, 0x16, 0x8a, 0x8e, 0x4a, 0x4c, 0x86, 0xae, 0xfd, 0xd2, 0xe9, 0x61, 0xd5, 0x97, 0x53, 0x1b,
	0xfa, 0xde, 0x69, 0x08, 0x4e, 0x7f, 0x52, 0x0f, 0x0b, 0x29, 0x3d, 0xb9, 0xe4, 0x2f, 0x92, 0x52,
	0xf7, 0x53, 0x63, 0x9e, 0xee, 0xea, 0x5c, 0xa0, 0x8f, 0x47, 0x4f, 0x9a, 0x1d, 0x4f, 0xcf, 0x1b,
	0x65, 0x19, 0x27, 0x0d, 0x43, 0xe5, 0xee, 0xf8, 0x5f, 0x12, 0xc8, 0x2d, 0x87, 0xe0, 0x51, 0x4e,
	0xde, 0x1a, 0x80, 0x6e, 0x68, 0xa6, 0x7d, 0x62, 0x6b, 0x7d, 0x1c, 0xae, 0xc2, 0xbc, 0xff, 0xe6,
	0x40, 0xeb, 0xe3, 0x84, 0x27, 0x96, 0x92, 0x9e, 0x18, 0xb1, 0x0a, 0xf5, 0xea, 0x5c, 0x21, 0xcc,
	0xf3, 0xeb, 0xd5, 0xc9, 0x3c, 0x07, 0x3e, 0x02, 0xea, 0x90, 0x2f, 0xc5, 0xde, 0x3d, 0x1d, 0xf2,
	0x85, 0xc7, 0xb5, 0xf5, 0x4f, 0x0d, 0x66, 0x54, 0xd3, 0x3b, 0x43, 0x2d, 0xb8, 0xb1, 0x87, 0xc9,
	0xa1, 0x6b, 0x7e, 0xd6, 0x08, 0x7e, 0x8b, 0x2f, 0x50, 0xa4, 0x6c, 0xe2, 0x75, 0x08, 0xa0, 0x28,
	0x02, 0x29, 0x75, 0xeb, 0x16, 0xdc, 0x48, 0x64, 0xb1, 0x28, 0x33, 0xb9, 0x1d, 0x43, 0x4d, 0x48,
	0x29, 0xd4, 0x2e, 0x54, 0xe2, 0x99, 0x29, 0xca, 0xca, 0x57, 0x95, 0x55, 0xbe, 0x90, 0xe2, 0xec,
	0xc3, 0x42, 0x32, 0xd3, 0x44, 0xd9, 0x19, 0xa8, 0x52, 0x15, 0x89, 0x29, 0xda, 0x4b, 0x28, 0xc7,
	0x12, 0x48, 0x94, 0x91, 0x55, 0x2a, 0x32, 0x57, 0x46, 0x41, 0xda, 0x70, 0x73, 0x22, 0x27, 0x42,
	0x53, 0x92, 0x25, 0x65, 0x4d, 0x28, 0xa7, 0x80, 0x87, 0xb0, 0xb4, 0x87, 0x49, 0x03, 0x6b, 0xfd,
	0x03, 0x7c, 0xbe, 0xd3, 0xeb, 0xb9, 0xd8, 0xf3, 0x92, 0xa6, 0x26, 0xdf, 0xa7, 0x54, 0x8c, 0x57,
	0xa4, 0x31, 0xc4, 0x97, 0x4e, 0xd7, 0x29, 0x0a, 0xf1, 0x08, 0xe4, 0x10, 0x71, 0x67, 0x60, 0x16,
	0x0b, 0x4a, 0x4f, 0xbe, 0x02, 0x41, 0x77, 0xa1, 0x12, 0x4f, 0x9f, 0x50, 0x56, 0x52, 0x35, 0xf6,
	0xbc, 0xa4, 0x30, 0x0c, 0x86, 0xc4, 0x7d, 0x88, 0x32, 0xaf, 0xc9, 0x71, 0x30, 0x4c, 0x48, 0x29,
	0xd4, 0x6b, 0xa8, 0x34, 0xec, 0x6e, 0x41, 0x48, 0x87, 0x8e, 0x5e, 0x04, 0xd2, 0x3e, 0xdc, 0xde,
	0xc3, 0xa4, 0xa8, 0x45, 0xff, 0x00, 0xd5, 0x3d, 0x4c, 0x5e, 0xe1, 0x81, 0xe3, 0x99, 0xe4, 0xc0,
	0x21, 0xe6, 0x6f, 0x17, 0xb1, 0x31, 0xe8, 0xff, 0x6c, 0xa2, 0x68, 0xc4, 0x74, 0x86, 0x5f, 0x41,
	0xa1, 0xbe, 0xc2, 0xef, 0xc3, 0xa0, 0x07, 0xd3, 0x1a, 0x35, 0x53, 0xf1, 0x1b, 0x50, 0x89, 0xb7,
	0x58, 0xd0, 0x6a, 0x70, 0x2d, 0x73, 0xda, 0x2e, 0xca, 0xca, 0x38, 0x9a, 0xbd, 0xb3, 0x23, 0xa2,
	0x91, 0xa1, 0x17, 0x60, 0xbc, 0x80, 0x72, 0xac, 0x71, 0x82, 0xe4, 0x00, 0x22, 0xdd, 0x4b, 0x99,
	0x82, 0xa0, 0x5f, 0x05, 0xe1, 0x15, 0xdc, 0x48, 0x34, 0x54, 0x50, 0x98, 0x5f, 0xf0, 0xba, 0x2c,
	0x62, 0x94, 0x7d, 0xb8, 0x9d, 0x6a, 0x93, 0xa0, 0xbb, 0xe3, 0x25, 0xe1, 0x25, 0x9f, 0x62, 0xb4,
	0x37, 0x70, 0x6b, 0xb2, 0xf9, 0x81, 0x6a, 0x91, 0x69, 0x97, 0xc3, 0x3a, 0x00, 0x94, 0x6e, 0x69,
	0xa0, 0x7b, 0x31, 0x23, 0x2f, 0x87, 0xf7, 0x1a, 0x6e, 0x4e, 0x34, 0x2a, 0xd0, 0x5a, 0x08, 0xc6,
	0xed, 0x5f, 0x88, 0x91, 0x1a, 0x50, 0x89, 0x77, 0x1f, 0x98, 0x07, 0x71, 0x3a, 0x12, 0xd9, 0xda,
	0x24, 0x8b, 0xa9, 0x48, 0x1b, 0x6e, 0x8d, 0x95, 0xb9, 0x83, 0xa9, 0x4a, 0x88, 0xed, 0xa0, 0xa8,
	0x44, 0x12, 0xa3, 0xed, 0xc2, 0x42, 0xb2, 0xa5, 0x81, 0xaa, 0x01, 0x14, 0xb7, 0xd1, 0x21, 0xc6,
	0x39, 0x84, 0x45, 0x4e, 0xa3, 0x02, 0xad, 0xc7, 0xc1, 0x2e, 0xb7, 0x7f, 0xbf, 0xc0, 0xaa, 0xb0,
	0xfb, 0x80, 0x1e, 0x04, 0xb8, 0xd3, 0xda, 0x13, 0x62, 0xf4, 0x0f, 0x50, 0x4b, 0x4d, 0x3e, 0xbe,
	0x18, 0xe0, 0xe2, 0x18, 0x5e, 0x40, 0x39, 0xd6, 0xaf, 0x60, 0x11, 0x9f, 0x6e, 0x61, 0x64, 0x46,
	0xd7, 0x64, 0x17, 0x82, 0x45, 0x97, 0xa0, 0x3b, 0x91, 0xe9, 0xc3, 0xf1, 0x4a, 0x96, 0xf9, 0x30,
	0xa7, 0xba, 0xcd, 0xf4, 0xbc, 0x54, 0x7d, 0xca, 0x3c, 0x4f, 0x54, 0xb8, 0x8a, 0xd1, 0x76, 0xa0,
	0xdc, 0xb0, 0xbb, 0x57, 0x52, 0xe8, 0x2d, 0xdc, 0x62, 0xd7, 0x6f, 0x21, 0xfa, 0x1c, 0x3a, 0xfa,
	0x55, 0xf5, 0x61, 0x97, 0xf8, 0xd5, 0xf5, 0xd9, 0x85, 0x85, 0x64, 0x33, 0x88, 0x45, 0x26, 0xb7,
	0x45, 0x94, 0xe9, 0x45, 0x93, 0x15, 0x26, 0xf3, 0x22, 0x41, 0xe5, 0x29, 0xc6, 0x52, 0xe1, 0x0e,
	0xef, 0x3b, 0x0b, 0xba, 0x1f, 0xe0, 0x65, 0x7c, 0x83, 0x11, 0x63, 0x3e, 0x87, 0xeb, 0xec, 0x73,
	0x09, 0x5a, 0x0a, 0x70, 0x26, 0x3e, 0x9f, 0x64, 0xad, 0x51, 0x25, 0xca, 0x7e, 0xde, 0x79, 0xa7,
	0xe3, 0x94, 0x30, 0xfe, 0x36, 0x95, 0x12, 0x26, 0x85, 0xc1, 0x69, 0xb0, 0xcc, 0xef, 0x0a, 0xa0,
	0xff, 0xf1, 0x8a, 0xf8, 0xc9, 0xf5, 0xba, 0x9f, 0x3d, 0x28, 0x8c, 0x9d, 0x54, 0xc1, 0xcd, 0x7c,
	0x43, 0x54, 0x89, 0x67, 0x46, 0x62, 0x47, 0x74, 0x07, 0x74, 0x2e, 0x7d, 0x07, 0xbc, 0x80, 0x72,
	0xac, 0xba, 0x65, 0x27, 0x55, 0xba, 0xe0, 0x15, 0x22, 0x74, 0x67, 0xfd, 0xef, 0x70, 0xdb, 0xff,
	0x06, 0x00, 0x00, 0xff, 0xff, 0x14, 0xc1, 0x8c, 0xf9, 0x0d, 0x1c, 0x00, 0x00,
}
